[{"title":"15. 线程池","url":"/2019/05/05/15.线程池/","content":"\n\n\n```java\npublic interface Executer {\n  void execute(Runnable command);\n}\n```\n\n\n\n```java\npublic interface ExecutorService extends Executor {\n  void shutdown();\n  List<Runnable> shutdownNow();\n  boolean isShutdown();\n  boolean isTerminated();\n  boolean awaitTermination(long timeout, TimeUnit unit);\n\n  <T> Future<T> submit(Callable<T> task);\n  <T> Future<T> submit(Runnable task, T result);\n  Future<?> submit(Runnable task);\n\n  <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n  <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit);\n}\n```\n\n\n\n```java\npublic abstract class AbstractExecutorService implements ExecutorService {\n  public Future<?> submit(Runnable task);\n  public <T> Future<T> submit(Runnable task, T result);\n  public <T> Future<T> submit(Callable<T> task);\n  \n  public <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit);\n  public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit);\n}\n```\n\n\n\n```java\npublic class ThreadPoolExecutor extends AbstractExecutorService {\n  private final BlockingQueue<Runnable> workQueue;\n  \n  public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler);\n  \n  public void execute(Runnable command);\n  public void shutdown();\n  public BlockingQueue<Runnable> getQueue();\n  \n  public int getPoolSize();\n  public long getTaskCount();\n}\n```\n\n\n\n```java\npublic class Executors {\n  public static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n    }\n\n    public static ExecutorService newSingleThreadExecutor() {\n        return new FinalizableDelegatedExecutorService\n            (new ThreadPoolExecutor(1, 1,\n                                    0L, TimeUnit.MILLISECONDS,\n                                    new LinkedBlockingQueue<Runnable>()));\n    }\n\n    public static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n    }\n\n    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        // return new ScheduledThreadPoolExecutor(corePoolSize);\n        new ThreadPoolExecutor(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n              new DelayedWorkQueue());\n    }\n}\n```\n\n\n\n\n\n其他问题：\n\n1. 为什么kafka，还有RabbitMQ、RocketMQ、ZeroMQ、ActiveMQ\n2. 为什么postgres\n3. 后台高并发设计\n\n","tags":["Java学习"]},{"title":"14. 常用缩写","url":"/2019/04/14/14.常用缩写/","content":"\n1. 版本：\n   - GA版本 = General Availability = 正式发布的版本 = Release\n   - RC版本 = Release Candidate = 候选版本\n   - LTS = Long Term Support = 长期演进版\n2. Java基础\n   - OOM = Out Of Memory\n   - NPE = NullPointer Exception\n   - OSGi = Open Service Gateway Initiative，开放服务网关，是Java动态化模块化系统的一系列规范\n   - JUC = java.url.concurrent包\n   - AQS = AbstractQueuedSynchronizer，抽象队列同步器，Java提供的底层同步工具类\n   - SPI = Service Provider Interface，JDK内置的一种服务提供发现机制\n   - JNDI = Java Naming & Directory Interface，Java命名目录服务\n   - JMS = Java Message Service，Java消息服务\n   - JTA = Java Transaction API，Java事务服务\n   - JNI = Java Native Interface，Java本地接口\n   - CGLIB = Code Generation Library\n   - SOA = Service Oriented Architecture，面向服务架构\n   - JIT  = Just In Time，即时编译技术\n3. 代码分层\n   - DO = Data Object，与数据库表结构一一对应，通过DAO层向上传输数据源对象\n   - DTO = Data Transfer Object，数据传输对象，Service和Manager向外传输的对象\n   - BO = Business Object，业务对象，可以由Service层输出的封装业务逻辑的对象\n   - Query，数据查询对象，各层接收上层的查询请求，注：超过2个参数的查询封装，禁止使用Map\n   - VO = View Object，显示层对象，通常是Web向模板渲染引擎层传输的对象\n4. 算法\n   - DP = Dynamic Planning\n5. 其他\n   - SCM = Source Control Management，版本控制管理\n","tags":["Java学习"]},{"title":"13. UML","url":"/2019/04/13/13.UML/","content":"\n1. 类\n   - UML表示为：\n     ![](<http://asewqa.nj-dingri.com/d1718c3bc6e76d4598db2f7cc6643174.png>)\n   - 类图分为三层\n     - 最顶层为**类名称**\n     - 中间层为**属性**，[可见性] [属性名称] : [类型] = [缺省值]?\n     - 最底层为**方法**，[可见性] [方法名称] ([参数列表]) : [类型]\n     - 可见性：[-]表示private，[+]表示public，[#]表示protected\n     - 抽象类无论类名或是属性名均用**斜体**表示\n\n2. 接口\n\n  - URL表示为：\n    ![](<http://asewqa.nj-dingri.com/591a20ad69aad3ed5a61ac43930993b5.png>)\n  - 和类图画法一样，只是多了 `<<interface>>` 字样\n\n3. 继承关系\n\n  - 带空心三角形的实线(子类->超类)\n\n4. 实现关系\n\n  - 带空心三角形的虚线(实现类->接口)\n","tags":["Java学习"]},{"title":"12. 职位","url":"/2019/04/12/12.职位/","content":"\n岗位要求： （关键字：**Java**、**SOA**、**OSGI**、**Spring**、Hibernate）\n1、扎实的java编程基础，精通**Java EE、SOA、OSGI**等相关技术；对各种开源的框架如**Spring、Hibernate**等有深入的了解，对框架本身有过开发或重构者可优先考虑；\n\n2、三年以上大型数据库如oracle使用经验，3年以上大规模高并发访问的Web应用系统设计和开发经验；\n\n3、熟练掌握unix/linux操作系统，对常用命令运用娴熟，能够根据实际需要快速编写shell脚本；\n\n4、具备良好的识别和设计通用框架及模块的能力；\n\n5、较强的表达和沟通能力；工作认真、严谨、敬业，对系统质量有近乎苛刻的要求意识；\n\n6、具有大型电子商务网站以及银行业核心系统、电信boss系统设计与研发经验背景的优先考虑；\n\n7、base地：上海、杭州、成都、深圳。\n\n\n\n\n\n岗位要求： （关键字：**Java**、**JVM**、**并发**、网络、单元测试、数据库、**Spring**、iBatis、**数据结构**、**设计模式**、分布式、**SOA**、消息队列、缓存）\n1. 扎实的**JAVA基础**，掌握**JVM**、**并发编程**、**网络编程**等基础知识；熟悉**单元测试**、**WEB开发**、**数据库**等基础技术。\n2. 熟悉**Spring、SpringMVC、iBatis**或其他主流开发框架；掌握**常用数据结构、常见设计模式**，拥有领域模型抽象能力。\n3. 具备大型网站核心开发、设计经验者优先；熟悉**分布式系统设计、SOA、消息队列、缓存**等技术者优先。\n4. 有强烈的技术热情和钻研精神，热爱新技术；有独立、主动的学习习惯和良好的沟通表达、团队协作能力。\n5. 具备较强的业务理解及业务抽象能力，能够快速从业务需求中找到技术设计的场景，有较强的业务sense.\n6. 要求2-5年以上开发经验，并对某一个或多个领域有较深入研究。\n","tags":["Java学习"]},{"title":"11. 链接","url":"/2019/04/11/11.链接/","content":"\n[面试题：Java面向对象的特征](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483693&idx=1&sn=f6e79d8278d31fcf86a110b347d1c71c&chksm=eb301f5bdc47964d0097be7ba9eeff1b0ac9e3ae98216b66f493361c8c116ee9dd2fce6d57eb&scene=21#wechat_redirect)\n\n[面试题：请你说说“面向对象六大原则”？](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483697&idx=1&sn=0bc065b7168155b22288f0df8ca73dfb&chksm=eb301f47dc4796516aae2bc47b5a374744b46e67c14189dec23bd8eb20a056f02613ee1713ce&scene=21#wechat_redirect)\n\n[面试题：谈谈final、finally、finalize的区别](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483702&idx=1&sn=ef71ed14cad03416882e946b394c33ad&chksm=eb301f40dc479656a093898da4245c677542c0d65a46a1f7d7e5990a8b0172e65b5a65bea4b4&scene=21#wechat_redirect)\n\n[面试题：java 内部类和静态内部类的区别](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483718&idx=1&sn=a9b44e28587731aa811220b2b1de5baf&chksm=eb301f30dc47962651785005af7dba9a0e06a9d03aaa59846947af45c757e9f9820b73a513fb&scene=21#wechat_redirect)\n\n[面试题：java 泛型详解-绝对是对泛型方法讲解最详细的](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483719&idx=1&sn=852db9f50298fec7436302d5b8a6f3ce&chksm=eb301f31dc479627acb7c184fb1a3fbc87118d7cdcb56359ee234eacfa9a9e24bcad08cf9266&scene=21#wechat_redirect)\n\n[面试题：Java 中的 ==, equals 与 hashCode 的区别与联系](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483723&idx=1&sn=dd836435bdf9f92c6cf4309bd100e834&chksm=eb301f3ddc47962bc3dcc713b9c39e78b95921afd21e905bc5f4bffb8507d9111d132b21c33b&scene=21#wechat_redirect)\n\n[面试题：java中重载与重写的区别](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483730&idx=1&sn=d2b460465096d9436c7dc452d963bb56&chksm=eb301f24dc479632c625e7655c3b007be110d87210797cfac539f57fd4b234608ec2ff657217&scene=21#wechat_redirect)\n\n[面试题：int与Integer的区别](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483736&idx=1&sn=8dd2cbcf80643b55fc28443296873e40&chksm=eb301f2edc479638568216a721328766af168ba5e1dcd2e8c4f1240d3fe377f52fac86373574&scene=21#wechat_redirect)\n\n[面试题：关于Java的反射机制，你需要理解这些..](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483742&idx=1&sn=014ed6e865fdcf60d25a6acb00a2c9bb&chksm=eb301f28dc47963e5a78fafaf7d241d2f20cd34d4be464b5e88a21a6e4eb0f58798906f680a9&scene=21#wechat_redirect)\n\n[面试题：Java容器之ArrayList全解析](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483748&idx=1&sn=887a9c77babc59d1861a8d47c0e86b51&chksm=eb301f12dc479604d538e9f693a5f6f24d7f2c3c43c52457c9ec96778d9627a6afd3dd096cd3&scene=21#wechat_redirect)\n\n[面试题：Java容器之LinkedList全解析](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483753&idx=1&sn=59e45164f7938b2334c0d163dda6b62c&chksm=eb301f1fdc479609622d70a070aeeaba13dabc2fec399676fa4bb9c16be0b31b1792b5b36a14&scene=21#wechat_redirect)\n\n[面试题：Java容器之HashMap](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483761&idx=1&sn=44c5a8a5300663274c37d8ad2eb6d3b7&chksm=eb301f07dc479611dc70ae6c3d392f0c9e4915b62d5e3b1cb318458b9c5e740d1f0c9b635456&scene=21#wechat_redirect)\n\n[面试题：java中HashSet详解](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483765&idx=1&sn=1a4e13c8dd6d7de42fdcb13172a5247e&chksm=eb301f03dc479615e5ca8c02411045f3ef6b2906134f9a925e09977c84ec2d3cf9b79ba49510&scene=21#wechat_redirect)\n\n[面试题：JAVA Hashmap的死循环及Java8的修复](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483769&idx=1&sn=7ea154f52cbf19777f44ad23002f06e6&chksm=eb301f0fdc4796196e3d2df5adf80ddb195a9efef134cfb38e4e05df66c9fbc5a867a6469af1&scene=21#wechat_redirect)\n\n[面试题：Java线程基础](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483775&idx=1&sn=0130f35b6d2542a2bbec7d141a7a3b18&chksm=eb301f09dc47961f41a69e683c6c44e3864370dd183b14e4dea07f5ee454638c76d4c1d3faba&scene=21#wechat_redirect)\n\n[面试题：线程的状态](http://mp.weixin.qq.com/s?__biz=MzI3MjUxNzkxMw==&mid=2247483780&idx=1&sn=b5739fe8e1f99232bc9e6efb15258f64&chksm=eb301ff2dc4796e43a8f4c25752086b68a2e80e866eed092e40feefd35cbffb69c72bc783557&scene=21#wechat_redirect)\n","tags":["Java学习"]},{"title":"10. 算法","url":"/2019/04/10/10.算法/","content":"\n1. 排序算法\n   - 快速排序\n   - 归并排序\n   - 冒泡排序\n\n2. 查找\n\n3. 树\n   - 二叉树\n   - B树\n   - 红黑树\n\n4. 动态规划DP\n\n   <https://blog.csdn.net/libosbo/article/details/80038549>\n","tags":["Java学习"]},{"title":"9. DevOps","url":"/2019/04/09/9.DevOps/","content":"\nDevOps是什么？从概念上说，DevOps 是一种方法论，是一组过程、方法与系统的统称,用于促进应用开发、应用运维和质量保障（QA）部门之间的沟通、协作与整合。\n\n1. MAVEN\n\n   - 依赖范围Scope\n     - compile：编译(默认)，对于编译、测试、运行都有效\n     - test：仅测试\n     - provided：运行时不需要（运行环境已提供）\n     - runtime：运行时需要\n\n   - 生命周期Lifecycle\n     - Clean：清理\n     - Default：构建的核心部分，编译、测试、打包、部署等\n     - Site：生成站点\n   - 每个生命周期有一些阶段Phase组成\n     - Clean：pre-clean、clean、post-clean\n     - Default：compile、install、deploy等\n     - Site：pre-site、site、post-site、site-deploy等\n   - 插件Plugin(插件的功能就是目标Goal)\n     - maven的核心仅定义了抽象的生命周期，具体任务有插件完成\n     - 每个插件都能实现多个功能，每个功能就是一个目标Goal\n     - maven的生命周期与插件的目标项目绑定，以完成某个具体的构建任务，例如compile就是插件maven-compiler-plugin的一个目标\n\n2. Nexus\n\n3. Gradle\n\n4. Jenkins（自动部署环境）\n   - 搭建\n   - 集成maven、git\n   - 多环境发布\n\n5. Sonar\n\n6. Git\n\n7. 敏捷开发\n","tags":["Java学习"]},{"title":"8. 设计模式","url":"/2019/04/08/8.设计模式/","content":"\n1. **简单工厂/静态工厂(StaticFactory Method)**\n\n   - 简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。\n   - Spring中实例：BeanFactory\n\n   ```java\n   public interface Calc {\n     double calc(double n1, double n2);\n   }\n\n   public class AddCalc implements Calc {\n     public double calc(double n1, double n2) {\n       return n1 + n2;\n     }\n   }\n\n   public class SubCalc implements Calc {\n     public double calc(double n1, double n2) {\n       return n1 - n2;\n     }\n   }\n\n   // 工厂\n   public class CalcFactory {\n     public static Calc getCalc(String type) {\n       if(\"+\".equals(type)) {\n         return new AddCalc();\n       }\n       if(\"-\".equals(type)) {\n         return new SubCalc();\n       }\n       return null;\n     }\n   }\n\n   // main\n   CalcFactory.getCalc(\"+\").calc(1, 1); // 2\n   CalcFactory.getCalc(\"-\").calc(1, 1); // 0\n   ```\n\n\n\n2. **工厂方法(Factory Method)**\n\n   - 定义一个用于创建对象的接口，让子类决定实例化哪一个类， **它使一个类的实例化延迟到子类**。\n\n   - Spring中实例：FactoryBean\n\n     ```java\n     public interface Calc {\n       double calc(double n1, double n2);\n     }\n\n     public class AddCalc implements Calc {\n       public double calc(double n1, double n2) {\n         return n1 + n2;\n       }\n     }\n\n     public interface CalcFactory {\n       Calc getCalc();\n     }\n\n     public class AddCalcFactory implements CalcFactory {\n       public getCalc() {\n         return new AddCalc();\n       }\n     }\n\n     // main\n     new AddCalcFactory().getCalc().calc(1, 1); // 2\n     ```\n\n\n\n3. **单例模式(Singleton)**\n\n   - 保证一个类仅有一个实例，并提供一个访问它的全局访问点\n   - Spring实例：BeanFactory提供了Bean的全局访问点，因为Spring管理的是任意对象所以没有从构造器级别去控制\n\n4. **适配器模式(Adapter)**\n\n   - 将一个接口转成客户希望的另外一个接口，使得原本接口不兼容而不能一起工作的那些类可以一起工作。\n\n   - 接口适配器(只需要接口的某些方法，可默认一个空的实现，子类选择需要的方法重载)\n\n   - Spring中实例：HandlerAdapter\n\n     ```java\n     public interface Simple {\n       void a();\n       void b();\n       void c();\n       void d();\n     }\n\n     // 接口适配器\n     public abstract class SimpleAdapter implements Simple {\n       public void a() {};\n       public void b() {};\n       public void c() {};\n       public void d() {};\n     }\n\n     // 接口适配器实例\n     public class SimpleAdapterSample {\n       public void b() { ... }\n     }\n     ```\n\n   - 类适配器、对象适配器\n\n     ```java\n     public interface A {\n       void doA();\n     }\n\n     public interface B {\n       void doB();\n     }\n\n     public class Simple implements A {\n       public void doA() {\n         System.out.println(\"doA\");\n       }\n     }\n\n     // 类适配器(通过继承实现适配器功能)\n     public class Adapter1 extends Simple implements B {\n       public void doB() {\n         doA();\n       }\n     }\n\n     // 对象适配器(通过组合来实现适配器功能)\n     public class Adapter2 implements B {\n       private A a;\n\n       public Adapter2(A a) {\n         this.a = a;\n       }\n\n       public void doB() {\n         a.doA();\n       }\n\n     }\n\n     // main\n     new Adapter1().doB(); //doA\n     new Adapter2(new Simple()).doB(); //doA\n\n     ```\n\n5. **装饰模式/包装器(Decorator)**\n\n   - 对已经存在的某些类进行装饰，以此来扩展一些功能。\n\n   - Spring实例：\\*Wrapper、\\*Decorator\n\n     ```java\n     // 统一接口，装饰类和被装饰类需实现该接口\n     public interface Component {\n       void action();\n     }\n\n     // 原始类(被装饰类)\n     public class OrgComponent implements Component {\n       public void action() {\n         System.out.println(\"orgComponent.action\");\n       }\n     }\n\n     // 装饰类(通过构造方法持有原始类)，通常采用默认实现，它的存在仅仅是一个声明，具体装饰由子类实现\n     public class Decorator implements Component {\n       private Component component;\n\n       public Decorator(Component c) {\n         this.component = c;\n       }\n\n       public void action() {\n         component.action();\n       }\n\n     }\n\n     // 具体的装饰类(执行前打印log)\n     public class PreLogDecorator extends Decorator {\n\n       public PreLogDecorator(Component c) {\n         super(c);\n       }\n\n       public void action() {\n         logger.log(\"preLog\");\n         super.action();\n       }\n\n     }\n\n     // 具体的装饰类(执行后打印log)\n     public class PostLogDecorator extends Decorator {\n\n       public PostLogDecorator(Component c) {\n         super(c);\n       }\n\n       public void action() {\n         super.action();\n         logger.log(\"postLog\");\n       }\n\n     }\n\n     // main\n     new PostLogDecorator(new PreLogDecorator(new OrgComponent())).action();\n     //preLog\n     //orgComponent.action\n     //postLog\n     ```\n\n\n\n6. **代理模式(Proxy)**\n\n   - 代理模式给目标对象提供一个代理对象，并由代理对象控制对目标对象的引用，通俗的讲就是中介。\n\n   - 作用：\n\n     - 中介隔离：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。\n     - 开闭原则增加功能：除了中介之外，还可以通过代理类增加额外的功能来扩展委托类的功能，这样只需要修改代理类而不需要修改委托类，符合代码设计的开闭原则(开放扩展封闭修改)\n\n   - Spring实例：JdkDynamicAopProxy、CglibAopProxy\n\n   - 静态代理\n\n     ```java\n     public interface A {\n       void doA();\n     }\n\n     public class ASimple implements A {\n       void doA() { ... }\n     }\n\n     // 代理类\n     public class AProxy implements A {\n       private A a;\n\n       public AProxy(A a) {\n         this.a = a;\n       }\n\n       public void doA() {\n         // preDoA\n         a.doA();\n         // postDoA\n       }\n     }\n\n     // main\n     new AProxy(new ASimple()).doA(); // preDoA ... PostDoA\n     ```\n\n   - 动态代理：程序运行时通过反射机制动态创建\n\n     ```java\n     public interface A {\n       void doA();\n     }\n\n     public class ASimple implements A {\n       void doA() { ... }\n     }\n\n     public class DynamicProxy implements java.lang.reflect.InvocationHandler {\n       private Object o;\n\n       public DynamicProxy(Object o) {\n         this.o = o;\n       }\n\n       @override\n       public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n         // preInvoke\n         Object ret = method.invoke(o, args);\n         // postInvoke\n         return ret;\n       }\n     }\n\n     // main\n     A a = (A) Proxy.newProxyInstance(ASimple.class.getClassLoader(), new Class[]{ A.class }, new DynamicProxy(new ASimple()));\n\n     a.doA(); // preInvoke ... postInvoke\n     ```\n\n   - JDK实现动态代理需要实现类通过接口定义方法，对于没有接口的类，使用CGLIB动态代理，其原理是通过字节码技术为一个类创建子类，并在子类中采用方法拦截技术拦截所有父类方法的调用，顺势织入横切逻辑。\n\n7. **观察者(Observer)**\n\n   - 在对象之间定义了一对多依赖，这样依赖，当一个对象改变状态，依赖它的对象会收到通知并自动更新。\n   - 发布订阅模式\n\n   - Spring中实例：ApplicationListener\n\n     ```java\n     // 被观察者接口\n     public interface Observerable {\n       void registerObserver(Observer o);\n       void removeObserver(Observer o);\n       void notifyObserver(Object msg);\n     }\n\n     // 观察者接口\n     public interface Observer {\n       void update(Object msg);\n     }\n\n     public class SimpleServer implements Observerable {\n       private List<Observer> observers = new ArrayList<>();\n\n       public void registerObserver(Observer o) {\n         observers.add(o);\n       }\n\n       public void removeObserver(Observer o) {\n         observers.remove(o);\n       }\n\n       public void notifyObserver(Object msg) {\n         observers.forEach(e -> e.update(msg));\n       }\n\n       public void updateServer() {\n         notifyObserver(\"server updated\");\n       }\n\n     }\n\n     public class User implements Observer {\n\n       public void update(Object msg) {\n         // msg\n       }\n\n     }\n\n     // main\n     SimpleServer server = new SimpleServer();\n\n     server.registerObserver(new User());\n\n     server.updateServer(); // server updated\n     ```\n\n\n\n8. **策略模式(Strategy)**\n\n   - 针对一组算法，将每一种算法都封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式最大的特点是使得算法可以在不影响客户端的情况下发生变化，从而改变不同的功能。\n\n   - Java实例：Comparator\n\n   ```java\n   public interface Calc {\n     double calc(double n1, double n2);\n   }\n\n   public class AddCalc() {\n     publci double calc(double n1, double n2) {\n       return n1 + n2;\n     }\n   }\n\n   public class SubtractCalc() {\n     publci double calc(double n1, double n2) {\n       return n1 - n2;\n     }\n   }\n\n   //\n   public class Strategy {\n     private Calc calc;\n\n     public Strategy(Calc c) {\n       this.calc = c;\n     }\n\n     public double calc(double n1, double n2) {\n       return calc.calc(n1, n2);\n     }\n\n   }\n\n   // main\n   new Strategy(new AddCalc()).calc(1, 1); // 2\n   new Strategy(new SubtractCalc()).calc(1, 1); // 0\n   ```\n\n9. **模板方法模式(Template Method)**\n\n   - 在一个方法中定义一个算法的骨架，而将一些步骤的实现延迟到子类中，模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中某些步骤的具体实现。\n\n   - Java实例：JdbcTempate、KafkaTempate\n\n   ```java\n   public abstract class Template {\n\n     public final void work() {\n       prepare();\n       execute();\n       destory();\n     }\n\n     public void prepare() { ... }\n\n     public abstract void execute();\n\n     public void destory() { ... }\n\n   }\n\n   public class TemplateSimple extends Template {\n\n     @override\n     public void execute() {\n       // execute\n     }\n   }\n\n   // main\n   new TemplateSimple().work(); // ... execute ...\n   ```\n\n\n\n10. **外观/门面模式(Facade)**\n\n    - 为子系统中的一组接口提供一个一致性的界面(接口)，此模式定义了一个高层接口，简化了系统的使用。\n\n    - 简单来说，该模式就是把一些复杂的子系统流程封装成一个接口对外提供简单的使用。\n\n    - 相关角色\n\n      - 门面角色：外观模式的核心，它被客户端调用，它熟悉子系统的功能，内部根据客户角色的需求预定了几种功能的组合\n      - 子系统角色：实现了子系统的功能，它对客户和门面是未知的\n      - 客户角色：通过门面角色来完成要实现的功能\n\n      ```java\n      public class Cpu {\n        void start() {};\n        void stop() {};\n      }\n\n      public class Memory() {\n        void start() {};\n        void stop() {};\n      }\n\n      public class Disk() {\n        void start() {};\n        void stop() {};\n      }\n\n      // 门面类\n      public Computer {\n        private Cpu cpu;\n        private Memory memory;\n        private Disk disk;\n\n        public Computer() {\n          cpu = new Cpu();\n          memory = new Memory();\n          disk = new Disk();\n        }\n\n        public void start() {\n          cpu.start();\n          memory.start();\n          disk.start();\n        }\n\n        public void stop() {\n          cpu.stop();\n          memory.stop();\n          disk.stop();\n        }\n\n      }\n      ```\n\n11. **委派模式(Delegate)**\n\n    - 负责任务的调用和分配任务，根代理模式很像，可以看做是一种特殊情况下的静态代理的全权代理，但是代理模式注重过程，而委派模式注重结果。\n\n    - Spring中实例：DispatcherServlet\n\n      ```java\n      public interface Task {\n        void doTask(String type);\n      }\n\n      public class Worker1 implements Task {\n        public void doTask(String type) {\n          // worker1.doTask\n        }\n      }\n\n      public class Worker2 implements Task {\n        public void doTask(String type) {\n          // worker2.doTask\n        }\n      }\n\n      // 委派角色\n      public class TaskDelegate implements Task {\n        public void doTask(String type) {\n          if(\"task1\".equals(type)) {\n            new Worker1().doTask(type);\n          } else {\n            new Worker2().doTask(type);\n          }\n        }\n      }\n\n      // main\n      new TaskDelegate().doTask('task1'); // worker1.doTask\n      new TaskDelegate().doTask('task2'); // worker2.doTask\n      ```\n\n\n\n12. **原型模式(Prototype)**\n\n    - 即克隆技术，需实现 `Cloneable` 接口，调用父类clone()实现浅拷贝，或重写以实现深拷贝\n","tags":["Java学习"]},{"title":"7. 微服务","url":"/2019/04/07/7.微服务/","content":"\n1. SpringCloud常用组件\n\n   - 服务发现：Netflix Eureka\n     - 作用：实现服务治理(服务注册与发现)\n     - Eureka服务端作为注册中心，支持集群部署\n     - Eureka客户端是一个java客户端，用来处理服务注册与发现\n     - 在应用启动时，Eureka客户端向服务端注册自己的服务信息，同时将服务端的服务信息缓存到本地，客户端会和服务端周期性的进行心跳交互，以更新服务租约和服务信息。\n   - 客户端负载均衡：Netflix Ribbon\n     - 作用：主要提供客户侧的软件负载均衡算法\n     - Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现，通过Spring Cloud封装，可以让我们轻松地将面向服务的REST模板请求自动转换成客户端负载均衡的服务调用。\n   - 断路器：Netflix Hystrix\n     - 作用：断路器，保护系统，控制故障范围\n   - 服务网关：Netflix Zuul\n     - 作用：API网关，路由，负载均衡等多种应用\n   - 分布式配置：Spring Cloud Config\n     - 作用：配置管理\n     - Config提供服务器端和客户端，服务器端默认的存储方式是git，可以轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具\n\n   - Fegion声明式事务调用\n   - Hystrix服务熔断降级方式\n   - Zuul实现微服务网关\n   - Config分布式统一配置中心\n   - Sleuth调用链路跟踪\n   - Spring Cloud Bus消息总线\n\n2. Docker\n","tags":["Java学习"]},{"title":"5. 分布式","url":"/2019/04/05/5.分布式/","content":"\n1. 描述一个服务从发布到消费的详细过程\n\n2. 分布式系统怎么做服务治理\n\n3. 接口幂等性的概念\n\n4. 对分布式事务的理解\n\n5. 负载均衡算法\n\n6. Zookeeper的用途，选举的原理是什么\n\n7. 数据的垂直拆分和水平拆分\n\n8. Zookeeper原理和适用场景\n\n9. Zookeeper的watch机制\n\n10. redis/zk节点宕机如何处理\n\n11. 分布式集群下如何做到唯一序列号\n\n12. 如何做一个分布式锁\n\n    - 分布式锁可靠性\n      - 互斥，任意时刻只有一个客户端持有\n      - 不会发生死锁，持有锁期间崩溃也可以主动解锁(超时机制)\n      - 容错性，集群大部分正常就可以加解锁\n      - 加锁解锁必须是同一客户端(使用value值区分)\n\n    - 分布式锁一般有三种实现方式\n\n      - 数据库乐观锁\n\n      - 基于Redis的分布式锁\n\n        ```java\n        // 加锁\n        jedis.set(key, value.toString(), SetParams.setParams().ex(10).nx());\n        // ex: Set the specified expire time, in seconds.\n        // px: Set the specified expire time, in milliseconds.\n        // nx: Only set the key if it does not already exist.\n        // xx: Only set the key if it already exist.\n\n        // 解锁(为了确保原子性使用lua脚本)\n        String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n        jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));\n        ```\n\n      - 基于zookeeper的分布式锁\n\n13. 消息队列ActiveMQ、Kafka、RabbitMQ\n\n14. Redis主从复制\n","tags":["Java学习"]},{"title":"4. 网络","url":"/2019/04/04/4.网络/","content":"\n1. BIO、NIO和AIO\n\n   - BIO (Blocking IO)，同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销。JDK1.4之前唯一的选择。\n   - NIO (Non-Blocking IO)，同步非阻塞，服务器端实现模式为一个连接一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有IO请求时才启动一个线程进行处理。JDK1.4开始支持。\n   - AIO (Asynchronous IO)，异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的IO请求都是由OS先完成了再通知服务器应用去启动线程进行处理。JDK7开始支持。\n\n2. Netty是什么\n\n   - Netty是一个高性能、异步事件驱动的NIO框架，它提供了对TCP、UDP和文件传输的支持，作为一个异步NIO框架，Netty的所有IO操作都是异步非阻塞的，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO结果\n\n3. Netty的各大组件\n\n   - **Channel接口：基础的IO操作**，如绑定、连接、读写等都依赖于底层网络传输所提供的原语，在Java的网络编程中，基础核心类是Socket，而Netty的Channel提供了一组API，极大地简化了直接与Socket进行操作的复杂性，并且Channel是很多类的父类，如EmbeddedChannel、LocalServerChannel、NioDatagramaChannel、NioSctpChannel、NioSocketChannel等。\n\n   - **EventLoop接口：EventLoop定义了处理在连接过程中发生的事件的核心抽象**。\n\n     - 一个EventLoopGroup包含一个或多个EventLoop\n     - 一个EventLoop在生命周期中绑定到一个Thread上\n     - EventLoop使用其对应的Thread处理IO事件\n     - 一个Channel使用EventLoop进行注册\n     - 一个EventLoop可被分配至一个或多个Channel\n\n   - **ChannelFuture接口**：Netty中的所有IO操作都是异步的，不会立即返回，需要在稍后确定操作结果，因此Netty提供了ChannelFuture，其addListener方法可以注册一个ChannelFutureListener，当操作完成时(不管是成功还是失败)，均会被通知，ChannelFuture存储了之后执行的操作的结果并且无法预测操作何时被执行，提交至Channel的操作按照被唤醒的顺序被执行。\n\n   - ChannelHandler和ChannelPipeline与用户逻辑和数据流密切相关\n\n   - ChannelHandler接口：从应用开发者看，ChannelHandler是最重要的组件，其中存放用来处理进站和出站数据的用户逻辑。ChannelHandler的方法被网络事件触发，ChannelHandler可以用于几乎任何类型的操作，如将数据从一种格式转换为另一种格式或者处理抛出的异常。例如，其子接口ChannelInboundHandler接受进站的事件和数据以便被用户定义的逻辑处理，或者当响应所连接的客户端时刷新ChannelInboundHandler的数据。\n\n   - ChannelPipeline接口：ChannelPipeline为ChannelHandler链提供了一个容器并定义了用于沿着链传播入站和出站事件流的API。当创建Channel时，会自动创建一个附属的ChannelPipeline，ChannelHandler按照如下步骤安装在ChannelPipeline中。\n\n     - 一个ChannelInitializer的实现在ServerBootstrap中进行注册\n     - 当ChannelInitializer的initChannel方法被调用，ChannelInitializer在管道中安装一组自定义的ChannelHandlers\n     - ChannelInitializer从ChannelPipeline中移除自身\n\n     ChannelHandler可被当做放置任何代码的容器，用于处理到达并通过ChannelPipeline的事件或数据，数据可沿着处理链进行传递。当事件从客户端移动至服务器端时称为出站，反之称为入站。并且入站处理器和出站处理器可共存于同一个管道中，当读取入站数据或事件时，将会从管道的头部开始传递到第一个入站处理器，然后传递至下一个处理器直至管道的尾部，此时数据处理结束，当出站时，沿着处理链直到管道的头，然后进行网络传输。\n\n   - **Bootstrap：Netty的引导类应用程序网络层配置提供容器**，其涉及将进程绑定到给定的端口或连接一个进程到远程主机的指定端口上运行的另一个进程。引导类分为客户端引导Bootstrap和服务器端引导ServerBootstrap。其中，ServerBootstrap绑定指定端口来监听客户端连接请求，Bootstrap连接至远程服务端，并且ServerBootstrap包含两个EventLoopGroup，而Bootstrap只包含一个EventLoopGroup。ServerBootstrap包含两组通道，第一组包含一个ServerChannel表示服务器绑定到本地端口的监听套接字；第二组包含用来处理客户端连接所创建的通道，每接受一个连接时便会创建一个通道。\n\n4. Netty的线程模型\n\n5. TCP粘包/拆包的原因及解决方法\n\n   - 发生的原因\n     - 待发送数据大于TCP缓冲区剩余大小，拆包\n     - 待发送数据大于MSS(最大报文长度)，拆包\n     - 待发送数据小于TCP缓冲区大小，粘包\n     - 接收端没有及时读取缓冲区数据，粘包\n   - 解决方案\n     - 增加数据包头部\n     - 封装为固定长度\n     - 设置边界特殊字符\n\n6. 序列号协议及使用场景\n\n   - TCP序列号有32位，两个作用：syn=1时seq为初始值，syn=0时为当前连接累计发送的数据包字节数\n   - ACK=Next Seq\n\n7. Netty的零拷贝实现\n\n   - 传统意义上的零拷贝是指不在内核空间和用户空间之间拷贝数据，可通过FileChannel.transferTo()实现\n   - Netty在ByteBuffer也提供了零拷贝的实现\n\n     - HeapByteBuf：在堆内分配内存\n     - DirectByteBuf：直接在内存区域而不是堆区域分配，发送数据时不需要从堆拷贝到内存\n     - CompositeByteBuf：组合ByteBuf，不拷贝数据，只存储引用，实现逻辑组合\n   - Netty的接收和发送ByteBuffer都采用DirectByteBuf，使用堆外内存进行读写，避免了二次拷贝\n   - Netty提供了组合Buffer对象，可以聚合多个ByteBuffer\n   - Netty的文件传输采用了transferTo方法，它可以直接将文件缓冲区的数据发送到目标Channel\n\n8. Netty的高性能表现在哪些方面\n   - 异步非阻塞通信\n   - 零拷贝\n   - 内存池ByteBuf\n   - 高效的Reactor线程模型\n     - Reactor单线程模型：所有的IO操作都在同一个NIO线程上面完成\n     - Reactor多线程模型：一个Acceptor线程 + 读写线程池\n     - 主从Reactor多线程模型：多个Acceptor线程（accept + 认证）+ 读写线程池\n   - 无锁化的串行设计理念：同一个Channel在同一个线程\n   - 高效的并发编程\n     - volatile的大量、正确使用\n     - CAS和原子类的广泛使用\n     - 线程安全容器的使用\n     - 通过读写锁提升并发性能\n   - 高性能的序列化框架：默认使用Protobuf，可扩展Thrift\n   - 灵活的TCP参数配置能力\n     - buffer大小\n     - nodelay\n     - 软中断(连接和cpu绑定)\n\n9. 参考资料\n\n   - [Netty核心组件](https://www.cnblogs.com/leesf456/p/6831661.html)\n","tags":["Java学习"]},{"title":"3. Spring","url":"/2019/04/03/3.Spring/","content":"\n1. **BeanFactory和FactoryBean**\n\n   - BeanFactory是一个Factory，是负责生产和管理Bean的一个工厂，它是IOC容器的核心接口，它的职责包括：实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。BeanFactory只是接口并不是具体实现，Spring给出了很多实现，如DefaultListableBeanFactory（可遍历）、XmlBeanFactory、ApplicationContext等。\n   - FactoryBean是一个Bean，实现了FactoryBean接口的类有能力改变Bean，Spring会按照接口返回的内容去注册Bean（getObject、getObjectType、isSingleton）\n\n2. **SpringIOC理解及初始化过程**\n\n   - IOC即Inversion-Of-Control控制反转，是Spring的核心思想，是说对创建对象的控制权就行转移，以前创建对象的主动权和时机由自己控制，而现在转移到第三方，对Spring框架来说就是由Spring来负责控制对象的生命周期和对象间的关系\n   - DI即Dependency Injection依赖注入其实就是Spring IOC的实现方式\n   - IOC容器的初始化过程分为三步\n     - Resource定位（Resource是Spring中用于封装IO操作的接口，常见FileSystemResource、ClassPathResource、ServletContxtResource、UrlResource、ByteArrayResource；Spring提供了ResourceLoader接口用于实现不同Resource加载策略）\n     - 将Resource载入到BeanDefinition（BeanDefinition相当于一个数据结构，记录Bean的相关信息，如属性、构造方法等。先创建BeanDefinitionReader、初始化Reader、loadBeanDefinition）\n     - 将BeanDefinition注册到容器（Bean最终会被解析成BeanDefinition并与beanName、alias一同封装到BeanDefinitionHolder中，之后调用beanFactory.registerBeanDefinition注册到DefaultListableBeanFactory.beanDefinitionMap中）\n\n3. **BeanFactory和ApplicationContext**\n   - BeanFactory是Spring中比较原始的Factory，如XMLBeanFactory就是典型的BeanFactory，原始的BeanFactory无法支持Spring的许多插件，如AOP功能、Web应用等。\n   - ApplicationContext接口是由BeanFactory接口派生二来，因为提供了BeanFactory的所有功能，而且ApplicationContext以一种更面向框架的方式工作以及对上下文进行分层和实现继承，ApplicationContext还提供了以下功能：\n     - 利用MessageSource进行国际化\n     - 强大的事件机制（ApplicationContext的事件机制主要通过ApplicationEvent和ApplicationListener这两个接口提供，Spring提供了部门内置事件：ContextRefreshedEvent表示容器中所有的Bean都已经加载完成、ContextStartedEvent生命周期Beans的启动信号、ContextStoppedEvent生命周期beans的停止信号、ContextClosedEvent）\n     - 底层资源的访问（扩展了ResourceLoader接口）\n     - 对web应用的支持，如WebApplicationContext\n\n4. SpringBean生命周期和作用域\n\n   - SpringBean的生命周期\n\n     > 1. 实例化bean对象（通过构造方法或者工厂方法）\n     > 2. 设置对象属性（setter、依赖注入）\n     > 3. 如果bean实现了Aware接口则调用相关方法（包含BeanNameAware、BeanFactoryAware、ApplicationContextAware等）\n     > 4. 调用BeanPostProcessor.postProcessBeforeInitialization方法（BeanPostProcessor如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后增加额外的逻辑处理，则需要定义BeanPostProcessor接口的实现类，然后注册到IOC容器中）\n     > 5. 调用Bean的初始化方法（init-method）\n     > 6. 调用BeanPostProcessor.postProcessAfterInitialization方法\n     > 7. 初始化完成，可以使用Bean\n     > 8. 当bean不再需要时会经过清理阶段，如果bean实现了DisposableBean接口，则调用其destory方法\n     > 9. 最后调用其销毁方法（destory-method）\n\n   - SpringBean的作用域（scope）\n\n     - singleton：每次返回同一个实例，默认作用域\n     - prototype：每次返回新的实例\n     - request：适用于WebApplicationContext环境，每次请求创建新的实例\n     - session：适用于WebApplicationContext环境，同一个session创建一个实例\n     - global-session：适用于WebApplicationContext环境，所有session共享一个实例\n\n5. **SpringAOP原理**\n\n   - AOP即Aspect-Orient-Programming面向切面编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，比如事务管理、日志、缓存等。AOP实现的关键在于AOP框架自动创建AOP代理，AOP代理分为静态代理（以AspectJ为代表）和动态代理（以SpringAOP为代表）\n   - 静态代理：AOP框架会在编译阶段生成AOP代理对象，因此也称为编译时增强\n   - 动态代理：AOP框架不会去修改字节码，而是在内存中临时为方法生成一个AOP对象，这个AOP对象包含了目标对象的全部方法，并且在特定的切点做了增强处理，并且调用对象的方法。\n     - JDK动态代理：通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口，JDK动态代理的核心是InvocationHandler接口和Proxy类\n     - CGLIB动态代理：如果目标类没有实现接口，那么SpringAOP会选择CGLIB来动态代理目标类，CGLIB即Code Generation Library是一个代码生成的类库，可以在运行时动态的生成某个类的子类，CGLIB通过继承的方式做的动态代理，因此某个类被标记为final时无法使用CGLIB做动态代理\n     - JDK动态代理是SpringAOP的默认方法，也可以强制使用CGLIB（设置proxyTargetClass=true）\n   - 核心概念\n     - 横切关注点：对哪些方法进行拦截，拦截后怎么处理，这些关注点称之为横切关注点\n     - 切面Aspect：切面是对横切关注点的抽象（类是对物体特征的抽象）\n     - 连接点Joinpoint：被拦截到的点，因为Spring只支持方法类型的连接点，所以在Spring中连接点值得就是被拦截到的方法，实际上连接点还可以是字段或者构造器\n     - 切入点Pointcut：对连接点进行拦截的定义\n     - 通知Advice：所谓通知指的就是拦截到连接点之后要执行的代码，通知分为前置、后置、异常、最终、环绕\n     - 目标对象：代理的目标对象\n     - 织入：将切面应用到目标对象并导致代理对象创建的过程\n     - 引入：在不修改代码的前提下，引入可以在运行期为类动态的添加一些方法或字段\n\n6. **Spring如何管理事务，事务管理机制**\n\n   - 事务的ACID特性\n\n     - Atomicity原子性：事务是一个原子操作，有一系列动作组成，这些动作要么全部完成，要么都不做\n     - Consistency一致性：事务一旦完成（不管成功还是失败），系统必须确保业务处于一致性状态\n     - Isolation隔离性：事务应该与其他事务隔离开方式数据损坏\n     - Durability持久性：一旦事务完成，无论系统发生什么错误，它的结果都不应该受到影响\n\n   - 核心接口\n\n     - PlatformTransactionManager事务管理器：Spring并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现。（DataSourceTransactionManager、HibernateTransactionManager、JpaTransactionManager、JtaTransactionManager）\n\n       ```java\n       public interface PlatformTransactionManager {\n\n           TransactionStatus getTransaction(TransactionDefinition definition);\n\n       \tvoid commit(TransactionStatus status);\n\n       \tvoid rollback(TransactionStatus status);\n       }\n       ```\n\n     - TransactionDefinition基本事务属性定义：事务的基本属性，描述了事务策略如何应用到方法上。\n\n       ```java\n       public interface TransactionDefinition {\n\n           int getPropagationBehavior(); // 返回事务的传播行为\n\n           int getIsolationLevel(); // 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据\n\n           int getTimeout();  // 返回事务必须在多少秒内完成\n\n           boolean isReadOnly(); // 事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的\n       }\n       ```\n\n       并发事务引起的问题：\n\n       > - 脏读：脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时，如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的\n       > - 不可重复度：不可重复读发生在一个事务执行相同的查询两次或以上，但是每次都得到不同的数据，这通常是因为另一个并发线程在两次查询期间进行了更新\n       > - 幻读：事务第一次读取到的数据与再次读取到的数量不一致\n\n       事务属性包含了5个方面：\n\n       > 1. 传播行为：当事务方法被另一个事务方法调用时，必须指定事务应该如何传播\n       >    - REQUIRED：必须在事务中运行，如果有则加入，没有则新建\n       >    - SUPPORTS：不需要事务，如果有则加入\n       >    - MANDATORY：必须在事务中运行，如果没有则抛出异常\n       >    - REQUIRED_NEW：必须在自己的事务中运行，如果当前有则挂起当前并新建\n       >    - NOT_SUPPORTED：不应该运行在事务中，如果当前有则挂起当前\n       >    - NEVER：不应该运行在事务中，如果当前有则跑出异常\n       >    - NESTED：嵌套事务\n       > 2.  隔离级别：定义了一个事务可能受其他并发事务影响的程度\n       >    - DEFAULT：使用后端数据库默认的隔离级别\n       >    - READ_UNCOMMITTED：最低的隔离级别，允许读尚未提交的数据变更\n       >    - READ_COMMITTED：允许读并发事务已经提交的数据，是多数主流数据库默认的事务等级\n       >    - REPEATABLE_READ：重复读，保证了一个事务不会修改已经由另一个事务读取但未提交的数据\n       >    - SERIALIZABLE：串行化，最高的事务隔离级别，资源消耗最大\n       > 3. 回滚规则：默认发生运行时异常回滚，也可以声明发生特定异常时回滚\n       > 4. 事务超时：单位为秒\n       > 5. 是否只读：对于只读事务数据库可进行一些特定的优化\n\n     - TransactionStatus事务状态\n\n       ```java\n       public interface TransactionStatus extends SavepointManager, Flushable {\n\n           boolean isNewTransaction();\n\n       \tboolean hasSavepoint();\n\n       \tvoid setRollbackOnly();\n\n       \tboolean isRollbackOnly();\n\n       \tvoid flush();\n\n       \tboolean isCompleted();\n       }\n\n       ```\n\n   - Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦\n\n     - 编程式事务：Spring提供了两种方式的编程式事务管理，分别是TransactionTemplate和PlatformTransactionManager\n     - 声明式事务：声明式事务@Transactional\n\n7. Spring中用到了哪些设计模式\n\n   - 简单工厂：BeanFactory\n   - 工厂方法：FactoryBean\n   - 单例：Bean的全局访问点\n   - 适配器：如HandlerAdapter\n   - 包装器：\\*Warpper、\\*Decorator\n   - 代理：JDKDynamicAopProxy、CglibAopProxy\n   - 观察者：ApplicationListener\n   - 策略\n\n   - 模板方法：JdbcTemplate、KafkaTempate\n\n8. SpringMVC\n\n  - 处理流程：\n\n    - 用户发送请求至前端控制器DispatcherServlet\n    - DispatcherServlet收到请求调用HandlerMapping处理器映射器\n    - HandlerMapping根据请求URL找到具体的处理器，生成处理器对象及处理器拦截器链\n    - DispatcherServlet通过HandlerAdapter处理器适配器调用处理器\n    - 执行处理器(Controller，后端处理器)\n    - Controller执行完成后返回ModelAndView\n    - HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet\n    - DispatcherServlet将ModelAndView传给ViewResolver视图解析器\n    - ViewResolver解析后返回具体View\n    - DispatcherServlet对View进行渲染(即将模型数据填充至视图中)\n    - DispatcherServlet响应给用户\n\n  - 各组件\n\n    - DispatcherServlet前端控制器，它是整个流程控制的中心，由它调用其他组件处理用户请求，它的存在降低了组件之间的耦合性\n\n    - HandlerMapping处理器映射器，它负责根据用户请求找到Handler，SpringMVC提供了不同的映射器实现不同的映射方式，例如：配置文件、实现接口、注解方式等\n\n      ```java\n      public interface HandlerMapping {\n        HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception;\n      }\n      ```\n\n    - Handler处理器，它是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。一般情况需要开发人员根据业务需求开发Handler。\n\n    - HandlerAdapter处理器适配器，通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行\n\n      ```java\n      public interface HandlerAdapter {\n        boolean supports(Object handler);\n\n        ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception;\n\n        long getLastModified(HttpServletRequest request, Object handler);\n      }\n      ```\n\n    - ViewResolver视图解析器，它负责将处理结果生成View视图，ViewResolver首选根据逻辑视图名解析成物理视图名(即具体的页面地址)，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户\n\n      ```java\n      public interface ViewResolver {\n        View resolveViewName(String viewName, Locale locale) throws Exception;\n      }\n      ```\n\n\n\n    - View视图，SpringMVC框架提供了对很多View视图类型的支持，包括jstlView、freemarkerView、pdfView等\n    \n      ```java\n      public interface View {\n        String getContentType();\n    \n        void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;\n      }\n      ```\n\n\n\n9. SpringBoot\n\n   - SpringBoot主要简化了使用Spring的难度，省去了繁重的配置，提供了各种启动器，开发者能快速上手。\n   - SpringBoot的优点：独立运行、简化配置、自动配置、应用监控、容易上手\n   - SpringBoot配置文件\n     - application：项目的自动化配置\n     - bootstrap：使用Spring Cloud Config配置中心时添加注册中心低配置；固定不变的配置。在application配置文件之前加载\n     - 格式：properties、yml\n   - 核心注解\n     - @SpringBootApplication：启动类\n     - @SpringBootConfiguration：组合了@Configuration，实现了配置文件的功能\n     - @ComponentScan：Spring组件扫描\n   - 怎么开启Spring Boot特性\n     - 继承spring-boot-starter-parent项目\n     - 导入spring-boot-dependencies项目依赖\n   - Spring Boot需要独立的容器运行吗\n     - 可以不需要，内置了Tomcat/ Jetty等容器\n   - 运行Spring Boot有什么方式\n     - 打包用命令或者容器中运行\n     - 使用Maven/Gradle插件运行\n     - 直接执行main方法\n   - Spring Boot自动配置的原理是什么\n     - @EnableAutoConfiguration、@Configuration、@ConditionalOnClass就是自动配置的核心\n   - 如何理解starters\n     - 启动器，它包含了一些列可以集成到应用里面的依赖包\n   - 如何在Spring Boot启动时候运行一些特定的代码\n     - 实现接口ApplicationRunner或CommanLineRunner接口，它们都只提供了一个run方法\n   - Spring Boot有哪几种读取配置的方式\n     - @PropertySource\n     - @Value\n     - @Environment\n     - @CofnigurationProperites\n   - Spring Boot支持什么日志框架\n     - Logging、log4j2、Logback(默认)\n   - Spring Boot实现热部署有什么方式\n     - Spring Loaded\n     - Spring-boot-devtools\n   - Spring Boot配置加载顺序\n     - properites、yaml、系统环境变量、命令行参数\n   - Spring Boot如何定义多套不同环境配置\n     - Application-profile.properties\n     - -DSpring.profiles.active=profile\n   - Spring Boo兼容老Spring项目吗\n     - 可以兼容，使用@ImportResource注解导入老Spring项目配置文件\n   - 保护Spring Boot应用有哪些方法\n     - 生产环境使用Https\n     - 使用Snyk检查依赖\n     - 升级到最新版本\n     - 启用CSRF保护\n     - 使用内容安全策略防止XSS共计\n   - Spring Boot 2.x有什么新特性\n     - 配置变更\n     - JDK版本升级\n     - 第三方类库升级\n     - 响应式Spring编程支持\n     - HTTP/2支持\n     - 配置属性绑定\n\n10. JPA与Hibernate\n\n  - JPA即Java Persistence API（Java持久化接口），可以通过注解或XML描述“对象-关系表”之间的映射关系，并将实体对象持久到数据库中\n  - JPA为我们提供了：\n    - ORM映射元数据，元数据描述对象和表之间的映射关系如@Entity、@Table、@Column、@Transient\n    - JPA的API，用来操作实体对象，执行CRUD操作，框架在后台替我们完成所有的操作，如 `entityManager.merge(entity)`\n    - JPQL查询语言，通过面向对象而非面向数据库的查询语言查询数据，避免程序和SQL语句的紧密耦合，如 `from Student where s.name = ''`\n  - JPA是一种规范，而Hibernate是实现了JPA接口的ORM框架\n  - Spring Data JPA是Spring提供的一套简化JPA开发的框架，按照约定的方法命名规则写dao层接口，就可以在不写接口实现的情况下实现对数据库的访问和操作。\n","tags":["Java学习"]},{"title":"2. 内存及并发","url":"/2019/04/02/2.内存及并发/","content":"\n1. JVM内存结构：和Java虚拟机的运行时区域有关，JVM内存结构主要有三大块\n   - **堆内存**\n     - 堆内存是JVM中最大的一块，有**年轻代**和**老年代**组成\n     - 年轻代又被分成**Eden空间、From Survivor空间、To Survivor空间**，默认按**8:1:1**比例分配\n     - Java堆是GC的主要区域，因此也被称为**GC堆**\n     - 如果没有可用内存则抛出**OutOfMemoryError**\n   - **方法区**\n     - 各个线程共享的区域，主要存储已被虚拟机加载的类信息、常量、静态变量、构造函数等信息\n     - 方法区有一个别名叫做**Non-Heap(非堆)**，目的是与Java堆区分开\n     - 方法区又被称为**永久代(Permanent Generation)**，仅仅是因为HotSpot虚拟机将GC扩展至方法区\n   - **栈(线程私有)**\n     - 程序计数器（Program Counter Register）：记录当前执行字节码的行号(执行Native方法时值为Undefined)，此区域不会发生OOM\n     - JVM栈：生命周期与线程相同，虚拟机栈描述的是Java方法执行的内存模型，每个方法被执行的时候都会同时创建一个**栈帧(Stack Frame)**用于存储局部变量表、操作栈、动态链接、方法出口等\n     - 本地方法栈：与JVM栈类似，区别是JVM栈执行的是Java方法，而本地方法栈执行的是Native方法\n     - JVM栈和本地方法栈都会抛出**StackOverflowError**和**OutOfMemoryError**\n   - 控制参数：\n     - -Xms 设置堆的最小空间\n     - -Xmx 设置堆的最大空间\n     - -XX:NewSize 设置新生代的最小空间\n     - -XX:MaxNewSize 设置新生代的最大空间\n     - -XX:PermSize 设置永久代的(方法区)的最小空间\n     - -XX:MaxPermSize 设置永久代的最大空间大小\n     - -Xss 设置每个线程的堆栈大小\n     - 没有直接设置老年代的参数，老年代大小 = 堆空间大小 - 年轻代空间大小\n   - 参考<https://www.cnblogs.com/ityouknow/p/5610232.html>\n\n2. Java内存模型( JMM)，和Java的并发编程有关\n\n   - 并发编程的问题\n     - 原子性：操作不能被中断和再调度\n     - 可见性：多个线程访问同一变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值\n     - 有序性：程序执行的顺序按照代码的先后顺序执行\n\n   - 内存模型：为了保证共享内存的正确性(可见性、有序性、原子性)，内存模型定义了共享内存系统中多线程程序读写操作行为的规范。内存模型解决并发问题主要采用两种方式：**限制处理器优化**和**使用内存屏障**\n   - Java内存模型：是一种符合内存模型规范，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范\n     - 定义：Java内存模型规定了所有的变量都存储在主存中，每个线程有自己的工作内存，线程的工作内存中保存了该线程中用到的变量的主内存副本拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的传递均需要自己的工作内存和主存之间进行数据同步\n     - 原子性：字节码指令 `monitorenter` 和 `monitorexit` ，对应的关键字是 `synchronized`\n     - 可见性：被关键字 `volatile` 修饰的变量在被修改后可以立即同步到主内存，而每次使用之前都从主内存刷新；`synchronized` 和 `final` 两个关键字也可以实现可见性，只是实现方式不同\n     - 有序性：`synchronized` （同一时刻只允许一个线程操作）和 `volatile` （禁止指令重排）来保证多线程之间操作的有序性\n   - 详见<https://www.hollischuang.com/archives/2550>\n\n3. 什么情况下会出现内存溢出、内存泄露\n\n   - 内存泄露memory leak：程序无法释放已申请的内存，内存泄露最终会导致内存溢出\n\n   - 内存溢出：程序在申请内存时，没有足够的内存空间共使用\n   - 常见溢出OutOfMemoryError\n     - PermGen space，加载了大量的类，导致方法区内存不足，增大方法区内存\n     - Java heap space，创建了大量的对象，检查内存泄露或增加堆内存\n     - unable to create new native thread，jvm占用了大量的内存，导致os本身内存不足以创建物理线程\n\n4. jvm年轻代到年老代的晋升过程的判断条件是什么\n\n   - 年龄阈值：每经过一次MinorGC则年龄加1，达到一定程度（默认15，-XX:MaxTenuringThreshold）则晋升为老年代\n   - 提前晋升：如果survivor区中相同年龄所有对象大小总和超过survivor空间的一半，则大于等于该年龄的对象可直接进入老年代\n\n5. jvm频繁出现fullGC怎么去线上排查问题\n\n   - 开启GC日志\n   - jvisualvm、mat\n\n6. 类加载为什么要使用双亲委派模式，什么场景打破了这个模式\n\n   - 类加载器\n     - 启动类加载器BootstrapClassLoader，加载/lib\n     - 扩展类加载器ExtClassLoader，加载/lib/ext和-Djava.ext.dirs\n     - 系统类加载器AppClassLoader，加载classpath\n\n   - 先调用父加载器加载，如果加载失败则自己加载(parent.loadClass() -> this.findClass())，保证基础类都由启动类加载器加载\n   - 破坏双亲委派模式的场景\n     - 向前兼容\n     - Java中所有涉及SPI(Service Provider Interface)的加载动作都是采用逆向加载的方式(父类加载器请求子加载器去完成类加载动作，通过线程上下文加载器ThreadContextClassLoader)\n     - Java模块化标准的OSGi，不再是双亲委派的树状结构，而是网状结构\n\n7. 类的实例化顺序\n\n   - 父类static成员和static块\n   - 子类static成员和static块\n   - 父类实例成员和实例初始化块\n   - 父类构造方法\n   - 子类实例成员和实例初始化块\n   - 子类构造方法\n   - **先静态方法，再构造方法，先父类后子类**\n\n8. jvm垃圾回收机制，如何触发MinorGC\n\n9. jvm中一次完整的GC流程（从ygc到fgc）是怎么样的\n\n10. 各种回收器的优缺点，重点是CMS、G1\n\n11. 各种回收算法\n\n12. OOM错误、StackOverflow错误、PermgenSpace错误\n\n13. 并发工具类\n    - CyclicBarrier，回环栅栏，让指定数量的线程到达栅栏的点，待所有线程都调用await后，await同时返回，回环指可重用\n    - CountDownLatch，await指定数量的线程执行结束，每个线程执行结束时countDown，为0时唤醒\n    - Semphore，信号量，控制同时访问的线程个数，持有N个许可证，acquire时减一，release时加一\n    - <https://mp.weixin.qq.com/s/RLx3QCk-JgNbycaNT8v85A>\n\n14. 并发集合\n    - ConcurrentHashMap\n    - ConcurrentLinkedQueue\n\n15. 原子操作\n    - 基本类型：AtomicBoolean、AtomicInteger、AtomicLong\n    - 数组：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray\n\n16. 其他\n    - ThreadLocal\n    - Fork/Join\n    - Callable和Future\n\n17. happens-before原则：在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在happens-before关系\n    - 程序次序规则：一个线程内，书写在前面的操作优先发生于书写在后面的操作\n    - 锁定规则：一个unlock操作优先发生于后面对同一个锁的lock操作\n    - volatile变量规则：对一个变量的写操作优先发生于后面对这个变量的读操作\n    - 传递规则\n    - 线程启动规则：start方法优先发生于此线程的每一个动作\n    - 线程中断规则：对线程interrupt方法的调用优先发生于被中断线程的代码检测到中断时间的发生\n    - 线程终结规则：线程中所有的操作都优先发生于线程的终止检测\n    - 对象终结规则：一个对象的初始化完成优先发生于它的finalize方法的开始\n\n18. 锁及优化\n    - synchronized对象锁，可作用于普通方法、静态方法、代码块\n    - 锁优化：自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁\n    - 锁状态：无锁、偏向锁、轻量级锁、重量级锁（随竞争升级，只升不降）\n    - CAS：Compare-And-Swap比较并替换（原子操作），仅当内存地址的值与预期值相等时才替换，否则什么都不做\n\n19. AQS\n\n    - AbstractQueuedSynchronizer，抽象队列同步器，Java提供的底层同步工具类\n\n20. 如何检测死锁，怎么预防死锁\n\n21. 如何保证多线程下i++结果正确\n\n22. 线程池的种类、区别和使用场景\n\n23. 线程池的实现原理和调度过程\n\n24. 线程池如何调优，最大数目如何确认\n\n25. ThreadLocal原理，需要注意什么\n\n26. ConcurrentHashMap介绍，为什么使用红黑树\n\n27. HashMap并发问题\n\n28. synchronized和lock的区别\n\n29. sun.misc.Unsafe\n\n    Java不能直接访问操作系统底层，而是通过本地方法来访问。Unsafe类提供了硬件级别的原子操作\n\n    - 分配和释放内存\n    - 定位和修改对象字段的内存地址\n    - 挂起与恢复线程，可使用并发框架的LockSupport类\n    - CAS操作 `compareAndSwap*`\n\n\n\n\n\n\n\n[再有人问你Java内存模型是什么，就把这篇文章发给他。](https://www.hollischuang.com/archives/2550)\n\n[JVM内存结构 VS Java内存模型 VS Java对象模型](https://www.hollischuang.com/archives/2509)\n\n[jvm系列(二):JVM内存结构](https://www.cnblogs.com/ityouknow/p/5610232.html)\n\n[全面理解Java内存模型](<https://blog.csdn.net/suifeng3051/article/details/52611310>)\n\n[JVM面试题及答案](https://www.liangzl.com/get-article-detail-15614.html)\n","tags":["Java学习"]},{"title":"1. 基础知识","url":"/2019/04/01/1.基础知识/","content":"\n1. 强引用、软引用、弱引用、虚引用（从强到弱）\n\n   - 强引用：默认声明的都是强引用，GC不会回收\n   - 软引用：内存不足时才会回收，由SoftReference声明\n   - 弱引用：每次GC都会回收，由WeakReference声明\n   - 虚引用：用于设置对象回收的通知（需结合ReferenceQueue），由PhantomReference声明\n\n2. HashMap在JDK1.8中的新功能\n\n   - 1.8之前采用头插法，多线程rehash时会造成逆序和死循环，1.8采用尾插法避免\n\n   - 1.8之前实现方式是数组+链表，1.8中当链表元素大于8个时改由红黑树实现\n","tags":["Java学习"]},{"title":"19. JVM","url":"/2019/03/19/19.JVM/","content":"\n**十九、JVM**\n\n**194. 说一下 jvm 的主要组成部分？及其作用？**\n\n- 类加载器（ClassLoader）\n- 运行时数据区（Runtime Data Area）\n- 执行引擎（Execution Engine）\n- 本地库接口（Native Interface）\n\n\n\n组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。\n\n**195. 说一下 jvm 运行时数据区？**\n\n- 程序计数器\n- 虚拟机栈\n- 本地方法栈\n- 堆\n- 方法区\n\n\n\n有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户进程的启动和结束而创建和销毁。\n\n\n\n![img](http://asewqa.nj-dingri.com/0b25c654adc9eebf60977bb76e0197d6.png)\n\n**196. 说一下堆栈的区别？**\n\n\\1. 栈内存存储的是局部变量而堆内存存储的是实体；\n\n\\2. 栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；\n\n\\3. 栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。\n\n**197. 队列和栈是什么？有什么区别？**\n\n- 队列和栈都是被用来预存储数据的。\n- 队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。\n- 栈和队列很相似，但它运行对元素进行后进先出进行检索。\n\n**198. 什么是双亲委派模型？**\n\n在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。\n\n\n\n类加载器分类：\n\n\n\n- 启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME/lib/目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库；\n- 其他类加载器：\n- 扩展类加载器（Extension ClassLoader）：负责加载<java_home style=\"box-sizing: border-box; -webkit-tap-highlight-color: transparent; text-size-adjust: none; -webkit-font-smoothing: antialiased; outline: 0px !important;\">\\lib\\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库；</java_home>\n- 应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。\n\n\n\n双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。\n\n**199. 说一下类加载的执行过程？**\n\n类加载分为以下 5 个步骤：\n\n\n\n1. 加载：根据查找路径找到相应的 class 文件然后导入；\n2. 检查：检查加载的 class 文件的正确性；\n3. 准备：给类中的静态变量分配内存空间；\n4. 解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；\n5. 初始化：对静态变量和静态代码块执行初始化工作。\n\n**200. 怎么判断对象是否可以被回收？**\n\n一般有两种方法来判断：\n\n\n\n- 引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；\n- 可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。\n\n**201. java 中都有哪些引用类型？**\n\n- 强引用\n- 软引用\n- 弱引用\n- 虚引用（幽灵引用/幻影引用）\n\n**202. 说一下 jvm 有哪些垃圾回收算法？**\n\n- 标记-清除算法\n- 标记-整理算法\n- 复制算法\n- 分代算法\n\n**203. 说一下 jvm 有哪些垃圾回收器？**\n\n- Serial：最早的单线程串行垃圾回收器。\n- Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。\n- ParNew：是 Serial 的多线程版本。\n- Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。\n- Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。\n- CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。\n- G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。\n\n**204. 详细介绍一下 CMS 垃圾回收器？**\n\nCMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。\n\n\n\nCMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。\n\n**205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？**\n\n- 新生代回收器：Serial、ParNew、Parallel Scavenge\n- 老年代回收器：Serial Old、Parallel Old、CMS\n- 整堆回收器：G1\n\n\n\n新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。\n\n**206. 简述分代垃圾回收器是怎么工作的？**\n\n分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。\n\n\n\n新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：\n\n\n\n- 把 Eden + From Survivor 存活的对象放入 To Survivor 区；\n- 清空 Eden 和 From Survivor 分区；\n- From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。\n\n\n\n每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。\n\n\n\n老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。\n\n**207. 说一下 jvm 调优的工具？**\n\nJDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。\n\n\n\n- jconsole：用于对 JVM 中的内存、线程和类等进行监控；\n- jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。\n\n**208. 常用的 jvm 调优的参数都有哪些？**\n\n- -Xms2g：初始化推大小为 2g；\n- -Xmx2g：堆最大内存为 2g；\n- -XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；\n- -XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；\n- –XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；\n- -XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；\n- -XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；\n- -XX:+PrintGC：开启打印 gc 信息；\n- -XX:+PrintGCDetails：打印 gc 详细信息。","tags":["Java团长"]},{"title":"18. Redis","url":"/2019/03/18/18.Redis/","content":"\n**十八、Redis**\n\n**179. redis 是什么？都有哪些使用场景？**\n\nRedis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n\n\n\nRedis 使用场景：\n\n- 数据高并发的读写\n- 海量数据的读写\n- 对扩展性要求高的数据\n\n**180. redis 有哪些功能？**\n\n- 数据缓存功能\n- 分布式锁的功能\n- 支持数据持久化\n- 支持事务\n- 支持消息队列\n\n**181. redis 和 memecache 有什么区别？**\n\n- memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型\n- redis的速度比memcached快很多\n- redis可以持久化其数据\n\n**182. redis 为什么是单线程的？**\n\n因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。\n\n\n\n关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。\n\n\n\n而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。\n\n**183. 什么是缓存穿透？怎么解决？**\n\n缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。\n\n\n\n解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。\n\n**184. redis 支持的数据类型有哪些？**\n\nstring、list、hash、set、zset。\n\n**185. redis 支持的 java 客户端都有哪些？**\n\nRedisson、Jedis、lettuce等等，官方推荐使用Redisson。\n\n**186. jedis 和 redisson 有哪些区别？**\n\n\n\nJedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持。\n\n\n\nRedisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。\n\n**187. 怎么保证缓存和数据库数据的一致性？**\n\n- 合理设置缓存的过期时间。\n- 新增、更改、删除数据库操作时同步更新 Redis，可以使用事物机制来保证数据的一致性。\n\n**188. redis 持久化有几种方式？**\n\nRedis 的持久化有两种方式，或者说有两种策略：\n\n\n\n- RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。\n- AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。\n\n**189. redis 怎么实现分布式锁？**\n\nRedis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。\n\n\n\n占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。\n\n**190. redis 分布式锁有什么缺陷？**\n\nRedis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题。\n\n**191. redis 如何做内存优化？**\n\n尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。\n\n\n\n比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面。\n\n**192. redis 淘汰策略有哪些？**\n\n- volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。\n- volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。\n- volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰。\n- allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰。\n- allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰。\n- no-enviction（驱逐）：禁止驱逐数据。\n\n**193. redis 常见的性能问题有哪些？该如何解决？**\n\n- 主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。\n- Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内。","tags":["Java团长"]},{"title":"17. MySql","url":"/2019/03/17/17.MySql/","content":"\n**十七、MySql**\n\n**164. 数据库的三范式是什么？**\n\n- 第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。\n- 第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。\n- 第三范式：任何非主属性不依赖于其它非主属性。\n\n**165. 一张自增表里面总共有 17 条数据，删除了最后 3 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？**\n\n- 表类型如果是 MyISAM ，那 id 就是 18。\n- 表类型如果是 InnoDB，那 id 就是 15。\n\n\n\nInnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。\n\n**166. 如何获取当前数据库版本？**\n\n使用 select version() 获取当前 MySQL 数据库版本。\n\n**167. 说一下 ACID 是什么？**\n\n- Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。\n- Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。\n- Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。\n- Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n**168. char 和 varchar 的区别是什么？**\n\nchar(n) ：固定长度类型，比如订阅 char(10)，当你输入\"abc\"三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。\n\nchat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。\n\nvarchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。\n\n所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。\n\n**169. float 和 double 的区别是什么？**\n\n- float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。\n- double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。\n\n**170. mysql 的内连接、左连接、右连接有什么区别？**\n\n内连接关键字：inner join；左连接：left join；右连接：right join。\n\n\n\n内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。\n\n**171. mysql 索引是怎么实现的？**\n\n索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。\n\n\n\n具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。\n\n**172. 怎么验证 mysql 的索引是否满足需求？**\n\n使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。\n\n\n\nexplain 语法：explain select * from table where type=1。\n\n**173. 说一下数据库的事务隔离？**\n\nMySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：transaction-isolation = REPEATABLE-READ\n\n\n\n可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。\n\n\n\n- READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。\n- READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。\n- REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。\n- SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。\n\n\n\n脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。\n\n\n\n不可重复读 ：是指在一个事务内，多次读同一数据。\n\n\n\n幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。\n\n**174. 说一下 mysql 常用的引擎？**\n\nInnoDB 引擎：InnoDB 引擎提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。\n\n\n\nMyIASM 引擎：MySQL 的默认引擎，但不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。\n\n**175. 说一下 mysql 的行锁和表锁？**\n\nMyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。\n\n\n\n- 表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。\n- 行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。\n\n**176. 说一下乐观锁和悲观锁？**\n\n- 乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。\n- 悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。\n\n\n\n数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。\n\n**177. mysql 问题排查都有哪些手段？**\n\n- 使用 show processlist 命令查看当前所有连接信息。\n- 使用 explain 命令查询 SQL 语句执行计划。\n- 开启慢查询日志，查看慢查询的 SQL。\n\n**178. 如何做 mysql 的性能优化？**\n\n- 为搜索字段创建索引。\n- 避免使用 select *，列出需要查询的字段。\n- 垂直分割分表。\n- 选择正确的存储引擎。\n","tags":["Java团长"]},{"title":"16. Zookeeper","url":"/2019/03/16/16.Zookeeper/","content":"\n**十六、Zookeeper**\n\n**157. zookeeper 是什么？**\n\nzookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。\n\n**158. zookeeper 都有哪些功能？**\n\n- 集群管理：监控节点存活状态、运行请求等。\n- 主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。\n- 分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。\n- 命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。\n\n**159. zookeeper 有几种部署模式？**\n\nzookeeper 有三种部署模式：\n\n- 单机部署：一台集群上运行；\n- 集群部署：多台集群运行；\n- 伪集群部署：一台集群启动多个 zookeeper 实例运行。\n\n**160. zookeeper 怎么保证主从节点的状态同步？**\n\nzookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。\n\n**161. 集群中为什么要有主节点？**\n\n在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。\n\n**162. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？**\n\n可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。\n\n**163. 说一下 zookeeper 的通知机制？**\n\n客户端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。\n","tags":["Java团长"]},{"title":"15. Kafka","url":"/2019/03/15/15.Kafka/","content":"\n**十五、Kafka**\n\n**152. kafka 可以脱离 zookeeper 单独使用吗？为什么？**\n\nkafka 不能脱离 zookeeper 单独使用，因为 kafka 使用 zookeeper 管理和协调 kafka 的节点服务器。\n\n**153. kafka 有几种数据保留的策略？**\n\nkafka 有两种数据保存策略：按照过期时间保留和按照存储的消息大小保留。\n\n**154. kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？**\n\n这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。\n\n**155. 什么情况会导致 kafka 运行变慢？**\n\n- cpu 性能瓶颈\n- 磁盘读写瓶颈\n- 网络瓶颈\n\n**156. 使用 kafka 集群需要注意什么？**\n\n- 集群的数量不是越多越好，最好不要超过 7 个，因为节点越多，消息复制需要的时间就越长，整个群组的吞吐量就越低。\n- 集群数量最好是单数，因为超过一半故障集群就不能用了，设置为单数容错率更高。\n","tags":["Java团长"]},{"title":"14. RabbitMQ","url":"/2019/03/14/14.RabbitMQ/","content":"\n**十四、RabbitMQ**\n\n\n\n**135. rabbitmq 的使用场景有哪些？**\n\n\n\n①. 跨系统的异步通信，所有需要异步交互的地方都可以使用消息队列。就像我们除了打电话（同步）以外，还需要发短信，发电子邮件（异步）的通讯方式。\n\n\n\n②. 多个应用之间的耦合，由于消息是平台无关和语言无关的，而且语义上也不再是函数调用，因此更适合作为多个应用之间的松耦合的接口。基于消息队列的耦合，不需要发送方和接收方同时在线。在企业应用集成（EAI）中，文件传输，共享数据库，消息队列，远程过程调用都可以作为集成的方法。\n\n\n\n③. 应用内的同步变异步，比如订单处理，就可以由前端应用将订单信息放到队列，后端应用从队列里依次获得消息处理，高峰时的大量订单可以积压在队列里慢慢处理掉。由于同步通常意味着阻塞，而大量线程的阻塞会降低计算机的性能。\n\n\n\n④. 消息驱动的架构（EDA），系统分解为消息队列，和消息制造者和消息消费者，一个处理流程可以根据需要拆成多个阶段（Stage），阶段之间用队列连接起来，前一个阶段处理的结果放入队列，后一个阶段从队列中获取消息继续处理。\n\n\n\n⑤. 应用需要更灵活的耦合方式，如发布订阅，比如可以指定路由规则。\n\n\n\n⑥. 跨局域网，甚至跨城市的通讯（CDN行业），比如北京机房与广州机房的应用程序的通信。\n\n\n\n**136. rabbitmq 有哪些重要的角色？**\n\n\n\nRabbitMQ 中重要的角色有：生产者、消费者和代理：\n\n\n\n- 生产者：消息的创建者，负责创建和推送数据到消息服务器；\n- 消费者：消息的接收方，用于处理数据和确认消息；\n- 代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。\n\n\n\n**137. rabbitmq 有哪些重要的组件？**\n\n\n\n- ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用。\n- Channel（信道）：消息推送使用的通道。\n- Exchange（交换器）：用于接受、分配消息。\n- Queue（队列）：用于存储生产者的消息。\n- RoutingKey（路由键）：用于把生成者的数据分配到交换器上。\n- BindingKey（绑定键）：用于把交换器的消息绑定到队列上。\n\n\n\n**138. rabbitmq 中 vhost 的作用是什么？**\n\n\n\nvhost 可以理解为虚拟 broker ，即 mini-RabbitMQ  server。其内部均含有独立的 queue、exchange 和 binding 等，但最最重要的是，其拥有独立的权限系统，可以做到 vhost 范围的用户控制。当然，从 RabbitMQ 的全局角度，vhost 可以作为不同权限隔离的手段（一个典型的例子就是不同的应用可以跑在不同的 vhost 中）。\n\n\n\n**139. rabbitmq 的消息是怎么发送的？**\n\n\n\n首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息，客户端和 rabbit server 之间会创建一个 tcp 连接，一旦 tcp 打开并通过了认证（认证就是你发送给 rabbit 服务器的用户名和密码），你的客户端和 RabbitMQ 就创建了一条 amqp 信道（channel），信道是创建在“真实” tcp 上的虚拟连接，amqp 命令都是通过信道发送出去的，每个信道都会有一个唯一的 id，不论是发布消息，订阅队列都是通过这个信道完成的。\n\n\n\n**140. rabbitmq 怎么保证消息的稳定性？**\n\n\n\n- 提供了事务的功能。\n- 通过将 channel 设置为 confirm（确认）模式。\n\n\n\n**141. rabbitmq 怎么避免消息丢失？**\n\n\n\n1. 消息持久化\n\n2. ACK确认机制\n\n3. 设置集群镜像模式\n\n4. 消息补偿机制\n\n\n\n**142. 要保证消息持久化成功的条件有哪些？**\n\n\n\n1. 声明队列必须设置持久化 durable 设置为 true.\n2. 消息推送投递模式必须设置持久化，deliveryMode 设置为 2（持久）。\n3. 消息已经到达持久化交换器。\n4. 消息已经到达持久化队列。\n\n\n\n以上四个条件都满足才能保证消息持久化成功。\n\n\n\n**143. rabbitmq 持久化有什么缺点？**\n\n\n\n持久化的缺点就是降低了服务器的吞吐量，因为使用的是磁盘而非内存存储，从而降低了吞吐量。可尽量使用 ssd 硬盘来缓解吞吐量的问题。\n\n\n\n**144. rabbitmq 有几种广播类型？**\n\n\n\n### 三种广播模式：\n\n\n\n1. fanout: 所有bind到此exchange的queue都可以接收消息（纯广播，绑定到RabbitMQ的接受者都能收到消息）；\n2. direct: 通过routingKey和exchange决定的那个唯一的queue可以接收消息；\n3. topic:所有符合routingKey(此时可以是一个表达式)的routingKey所bind的queue可以接收消息；\n\n\n\n**145. rabbitmq 怎么实现延迟消息队列？**\n\n\n\n1. 通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；\n2. 使用 RabbitMQ-delayed-message-exchange 插件实现延迟功能。\n\n\n\n**146. rabbitmq 集群有什么用？**\n\n\n\n集群主要有以下两个用途：\n\n\n\n- 高可用：某个服务器出现问题，整个 RabbitMQ 还可以继续使用；\n- 高容量：集群可以承载更多的消息量。\n\n\n\n**147. rabbitmq 节点的类型有哪些？**\n\n\n\n- 磁盘节点：消息会存储到磁盘。\n- 内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。\n\n\n\n**148. rabbitmq 集群搭建需要注意哪些问题？**\n\n\n\n- 各节点之间使用“--link”连接，此属性不能忽略。\n- 各节点使用的 erlang cookie 值必须相同，此值相当于“秘钥”的功能，用于各节点的认证。\n- 整个集群中必须包含一个磁盘节点。\n\n\n\n**149. rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？**\n\n\n\n不是，原因有以下两个：\n\n\n\n1. 存储空间的考虑：如果每个节点都拥有所有队列的完全拷贝，这样新增节点不但没有新增存储空间，反而增加了更多的冗余数据；\n2. 性能的考虑：如果每条消息都需要完整拷贝到每一个集群节点，那新增节点并没有提升处理消息的能力，最多是保持和单节点相同的性能甚至是更糟。\n\n\n\n**150. rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？**\n\n\n\n如果唯一磁盘的磁盘节点崩溃了，不能进行以下操作：\n\n\n\n- 不能创建队列\n- 不能创建交换器\n- 不能创建绑定\n- 不能添加用户\n- 不能更改权限\n- 不能添加和删除集群节点\n\n\n\n唯一磁盘节点崩溃了，集群是可以保持运行的，但你不能更改任何东西。\n\n\n\n**151. rabbitmq 对集群节点停止顺序有要求吗？**\n\n\n\nRabbitMQ 对集群的停止的顺序是有要求的，应该先关闭内存节点，最后再关闭磁盘节点。如果顺序恰好相反的话，可能会造成消息的丢失。\n","tags":["Java团长"]},{"title":"13. MyBatis","url":"/2019/03/13/13.MyBatis/","content":"\n**十三、Mybatis**\n\n**125. mybatis 中 #{}和 ${}的区别是什么？**\n\n- \\#{}是预编译处理，${}是字符串替换；\n- Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；\n- Mybatis在处理 \\${} 时，就是把 ${} 替换成变量的值；\n- 使用#{}可以有效的防止SQL注入，提高系统安全性。\n\n\n\n**126. mybatis 有几种分页方式？**\n\n\n\n1. 数组分页\n\n2. sql分页\n\n3. 拦截器分页\n\n4. RowBounds分页\n\n\n\n**128. mybatis 逻辑分页和物理分页的区别是什么？**\n\n\n\n- 物理分页速度上并不一定快于逻辑分页，逻辑分页速度上也并不一定快于物理分页。\n- 物理分页总是优于逻辑分页：没有必要将属于数据库端的压力加诸到应用端来，就算速度上存在优势,然而其它性能上的优点足以弥补这个缺点。\n\n\n\n**129. mybatis 是否支持延迟加载？延迟加载的原理是什么？**\n\n\n\nMybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。\n\n\n\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。\n\n\n\n当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。\n\n\n\n**130. 说一下 mybatis 的一级缓存和二级缓存？**\n\n\n\n一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。\n\n\n\n二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache/> ；\n\n\n\n对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。\n\n\n\n**131. mybatis 和 hibernate 的区别有哪些？**\n\n\n\n（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。\n\n\n\n（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。\n\n\n\n（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。\n\n\n\n**132. mybatis 有哪些执行器（Executor）？**\n\n\n\n#### Mybatis有三种基本的执行器（Executor）：\n\n\n\n1. **SimpleExecutor**：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。\n2. **ReuseExecutor**：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。\n3. **BatchExecutor**：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。\n\n\n\n**133. mybatis 分页插件的实现原理是什么？**\n\n\n\n分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。\n\n\n\n**134. mybatis 如何编写一个自定义插件？**\n\n\n\n转自：blog.csdn.net/qq_30051265/article/details/80266434\n\n\n\nMybatis自定义插件针对Mybatis四大对象（Executor、StatementHandler 、ParameterHandler 、ResultSetHandler ）进行拦截，具体拦截方式为：\n\n- Executor：拦截执行器的方法(log记录)\n- StatementHandler ：拦截Sql语法构建的处理\n- ParameterHandler ：拦截参数的处理\n- ResultSetHandler ：拦截结果集的处理\n\n\n\nMybatis自定义插件必须实现Interceptor接口：\n\n```java\npublic interface Interceptor {\n    Object intercept(Invocation invocation) throws Throwable;\n    Object plugin(Object target);\n    void setProperties(Properties properties);\n}\n```\n\n> intercept方法：拦截器具体处理逻辑方法\n>\n> plugin方法：根据签名signatureMap生成动态代理对象\n>\n> setProperties方法：设置Properties属性\n\n自定义插件demo：\n\n```java\n\n// ExamplePlugin.java\n@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  public Object intercept(Invocation invocation) throws Throwable {\n  Object target = invocation.getTarget(); //被代理对象\n  Method method = invocation.getMethod(); //代理方法\n  Object[] args = invocation.getArgs(); //方法参数\n  // do something ...... 方法拦截前执行代码块\n  Object result = invocation.proceed();\n  // do something .......方法拦截后执行代码块\n  return result;\n  }\n  public Object plugin(Object target) {\n    return Plugin.wrap(target, this);\n  }\n  public void setProperties(Properties properties) {\n  }\n}\n```\n\n一个@Intercepts可以配置多个@Signature，@Signature中的参数定义如下：\n\n- type：表示拦截的类，这里是Executor的实现类；\n- method：表示拦截的方法，这里是拦截Executor的update方法；\n- args：表示方法参数。\n\n\n\n\n\n<https://mp.weixin.qq.com/s/La9jgofJBKw4t6cm9t9pvA>\n","tags":["Java团长"]},{"title":"12. Hibernate","url":"/2019/03/12/12.Hibernate/","content":"\n**十二、Hibernate**\n\n\n\n**113. 为什么要使用 hibernate？**\n\n\n\n- 对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。\n- Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作\n- hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。\n- hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。\n\n\n\n**114. 什么是 ORM 框架？**\n\n\n\n对象-关系映射（Object-Relational Mapping，简称ORM），面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。\n\n\n\n**115. hibernate 中如何在控制台查看打印的 sql 语句？**\n\n\n\n参考：blog.csdn.net/Randy_Wang_/article/details/79460306\n\n\n\n**116. hibernate 有几种查询方式？**\n\n\n\n1. hql查询\n\n2. sql查询\n\n3. 条件查询\n\n```java\nhql查询，sql查询，条件查询\n\nHQL:  Hibernate Query Language. 面向对象的写法:\nQuery query = session.createQuery(\"from Customer where name = ?\");\nquery.setParameter(0, \"苍老师\");\nQuery.list();\n\n\n\nQBC:  Query By Criteria.(条件查询)\nCriteria criteria = session.createCriteria(Customer.class);\ncriteria.add(Restrictions.eq(\"name\", \"花姐\"));\nList<Customer> list = criteria.list();\n\n\n\nSQL:\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nList<Object[]> list = query.list();\n\nSQLQuery query = session.createSQLQuery(\"select * from customer\");\nquery.addEntity(Customer.class);\nList<Customer> list = query.list();\n\n\n\nHql： 具体分类\n1、 属性查询 2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数\n\n\n\nHQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的\n```\n\n\n\n**117. hibernate 实体类可以被定义为 final 吗？**\n\n\n\n可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能够避免出现前面所说的不利后果。\n\n\n\n**118. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？**\n\n\n\n在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。\n\n\n\n**119. hibernate 是如何工作的？**\n\n\n\nhibernate工作原理：\n\n\n\n1. 通过Configuration config = new Configuration().configure();//读取并解析hibernate.cfg.xml配置文件\n2. 由hibernate.cfg.xml中的<mapping resource=\"com/xx/User.hbm.xml\"/>读取并解析映射信息\n3. 通过SessionFactory sf = config.buildSessionFactory();//创建SessionFactory\n4. Session session = sf.openSession();//打开Sesssion\n5. Transaction tx = session.beginTransaction();//创建并启动事务Transation\n6. persistent operate操作数据，持久化操作\n7. tx.commit();//提交事务\n8. 关闭Session\n9. 关闭SesstionFactory\n\n\n\n**120. get()和 load()的区别？**\n\n\n\n- load() 没有使用对象的其他属性的时候，没有SQL  延迟加载\n- get() 没有使用对象的其他属性的时候，也生成了SQL  立即加载\n\n\n\n**121. 说一下 hibernate 的缓存机制？**\n\n\n\nHibernate中的缓存分为一级缓存和二级缓存。\n\n\n\n一级缓存就是  Session 级别的缓存，在事务范围内有效是,内置的不能被卸载。二级缓存是 SesionFactory级别的缓存，从应用启动到应用结束有效。是可选的，默认没有二级缓存，需要手动开启。保存数据库后，缓存在内存中保存一份，如果更新了数据库就要同步更新。\n\n\n\n什么样的数据适合存放到第二级缓存中？\n\n\n\n- 很少被修改的数据   帖子的最后回复时间\n- 经常被查询的数据   电商的地点\n- 不是很重要的数据，允许出现偶尔并发的数据\n- 不会被并发访问的数据\n- 常量数据\n\n\n\n扩展：hibernate的二级缓存默认是不支持分布式缓存的。使用  memcahe,redis等中央缓存来代替二级缓存。\n\n\n\n**122. hibernate 对象有哪些状态？**\n\n\n\nhibernate里对象有三种状态：\n\n\n\n1. Transient（瞬时）：对象刚new出来，还没设id，设了其他值。\n2. Persistent（持久）：调用了save()、saveOrUpdate()，就变成Persistent，有id。\n3. Detached（脱管）：当session  close()完之后，变成Detached。\n\n\n\n![img](<http://asewqa.nj-dingri.com/4bd72793893b63167670330d030cd512.png>)\n\n**123. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？**\n\n\n\nopenSession 从字面上可以看得出来，是打开一个新的session对象，而且每次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。\n\n\n\ngetCurrentSession ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。\n\n\n\n注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了。\n\n\n\n**124. hibernate 实体类必须要有无参构造函数吗？为什么？**\n\n\n\n必须，因为hibernate框架会调用这个默认构造方法来构造实例对象，即Class类的newInstance方法，这个方法就是通过调用默认构造方法来创建实例对象的。\n\n\n\n另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里，否则new Xxxx()是会报错的，所以默认的构造方法不是必须的，只在有多个构造方法时才是必须的，这里“必须”指的是“必须手动写出来”。\n","tags":["Java团长"]},{"title":"11. SpringBoot","url":"/2019/03/11/11.SpringBoot/","content":"\n**十一、Spring Boot / Spring Cloud**\n\n\n\n**104. 什么是 spring boot？**\n\n\n\n在Spring框架这个大家族中，产生了很多衍生框架，比如 Spring、SpringMvc框架等，Spring的核心内容在于控制反转(IOC)和依赖注入(DI),所谓控制反转并非是一种技术，而是一种思想，在操作方面是指在spring配置文件中创建\\<bean\\>，依赖注入即为由spring容器为应用程序的某个对象提供资源，比如 引用对象、常量数据等。\n\n\n\nSpringBoot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了Spring众多框架中所需的大量且繁琐的配置文件，所以 SpringBoot是一个服务于框架的框架，服务范围是简化配置文件。\n\n\n\n**105. 为什么要用 spring boot？**\n\n\n\n- Spring Boot使编码变简单\n- Spring Boot使配置变简单\n- Spring Boot使部署变简单\n- Spring Boot使监控变简单\n- Spring的不足\n\n\n\n**106. spring boot 核心配置文件是什么？**\n\n\n\nSpring Boot提供了两种常用的配置文件：\n\n\n\n- properties文件\n- yml文件\n\n\n\n**107. spring boot 配置文件有哪几种类型？它们有什么区别？**\n\n\n\nSpring Boot提供了两种常用的配置文件，分别是properties文件和yml文件。相对于properties文件而言，yml文件更年轻，也有很多的坑。可谓成也萧何败萧何，yml通过空格来确定层级关系，使配置文件结构跟清晰，但也会因为微不足道的空格而破坏了层级关系。\n\n\n\n**108. spring boot 有哪些方式可以实现热部署？**\n\n\n\nSpringBoot热部署实现有两种方式：\n\n\n\n**①. 使用spring loaded**\n\n\n\n在项目中添加如下代码：\n\n```xml\n\n<build>\n        <plugins>\n            <plugin>\n                <!-- springBoot编译插件-->\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <dependencies>\n                    <!-- spring热部署 -->\n                    <!-- 该依赖在此处下载不下来，可以放置在build标签外部下载完成后再粘贴进plugin中 -->\n                    <dependency>\n                        <groupId>org.springframework</groupId>\n                        <artifactId>springloaded</artifactId>\n                        <version>1.2.6.RELEASE</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n```\n\n\n\n添加完毕后需要使用mvn指令运行：\n\n　　　　\n\n首先找到IDEA中的Edit configurations ,然后进行如下操作：（点击左上角的\"+\",然后选择maven将出现右侧面板，在红色划线部位输入如图所示指令，你可以为该指令命名(此处命名为MvnSpringBootRun)）\n\n　　　　![img](<http://asewqa.nj-dingri.com/bff9ce7ad89df44271c10cdc36fac7b8.png>)\n\n　\n\n点击保存将会在IDEA项目运行部位出现，点击绿色箭头运行即可\n\n\n\n![img](<http://asewqa.nj-dingri.com/d5beb19dc9b3dcf1a22aabfc98b75993.png>)\n\n\n\n**②. 使用spring-boot-devtools**\n\n\n\n在项目的pom文件中添加依赖：\n\n```xml\n<!--热部署jar-->\n <dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-devtools</artifactId>\n </dependency>\n```\n\n\n\n然后：使用 shift+ctrl+alt+\"/\" （IDEA中的快捷键） 选择\"Registry\" 然后勾选 compiler.automake.allow.when.app.running\n\n\n\n**109. jpa 和 hibernate 有什么区别？**\n\n\n\n- JPA Java Persistence API，是Java EE 5的标准ORM接口，也是ejb3规范的一部分。\n- Hibernate，当今很流行的ORM框架，是JPA的一个实现，但是其功能是JPA的超集。\n- JPA和Hibernate之间的关系，可以简单的理解为JPA是标准接口，Hibernate是实现。那么Hibernate是如何实现与JPA的这种关系的呢。Hibernate主要是通过三个组件来实现的，及hibernate-annotation、hibernate-entitymanager和hibernate-core。\n- hibernate-annotation是Hibernate支持annotation方式配置的基础，它包括了标准的JPA annotation以及Hibernate自身特殊功能的annotation。\n- hibernate-core是Hibernate的核心实现，提供了Hibernate所有的核心功能。\n- hibernate-entitymanager实现了标准的JPA，可以把它看成hibernate-core和JPA之间的适配器，它并不直接提供ORM的功能，而是对hibernate-core进行封装，使得Hibernate符合JPA的规范。\n\n\n\n**110. 什么是 spring cloud？**\n\n\n\n从字面理解，Spring Cloud 就是致力于分布式系统、云服务的框架。\n\n\n\nSpring Cloud 是整个 Spring 家族中新的成员，是最近云服务火爆的必然产物。\n\n\n\nSpring Cloud 为开发人员提供了快速构建分布式系统中一些常见模式的工具，例如：\n\n\n\n- 配置管理\n- 服务注册与发现\n- 断路器\n- 智能路由\n- 服务间调用\n- 负载均衡\n- 微代理\n- 控制总线\n- 一次性令牌\n- 全局锁\n- 领导选举\n- 分布式会话\n- 集群状态\n- 分布式消息\n- ……\n\n\n\n使用 Spring Cloud 开发人员可以开箱即用的实现这些模式的服务和应用程序。这些服务可以任何环境下运行，包括分布式环境，也包括开发人员自己的笔记本电脑以及各种托管平台。\n\n\n\n**111. spring cloud 断路器的作用是什么？**\n\n\n\n在Spring Cloud中使用了Hystrix 来实现断路器的功能，断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决，如果问题似乎已经得到纠正，应用程序可以尝试调用操作。\n\n\n\n断路器增加了稳定性和灵活性，以一个系统，提供稳定性，而系统从故障中恢复，并尽量减少此故障的对性能的影响。它可以帮助快速地拒绝对一个操作，即很可能失败，而不是等待操作超时（或者不返回）的请求，以保持系统的响应时间。如果断路器提高每次改变状态的时间的事件，该信息可以被用来监测由断路器保护系统的部件的健康状况，或以提醒管理员当断路器跳闸，以在打开状态。\n\n\n\n**112. spring cloud 的核心组件有哪些？**\n\n\n\n**①. 服务发现——Netflix Eureka**\n\n\n\n一个RESTful服务，用来定位运行在AWS地区（Region）中的中间层服务。由两个组件组成：Eureka服务器和Eureka客户端。Eureka服务器用作服务注册服务器。Eureka客户端是一个java客户端，用来简化与服务器的交互、作为轮询负载均衡器，并提供服务的故障切换支持。Netflix在其生产环境中使用的是另外的客户端，它提供基于流量、资源利用率以及出错状态的加权负载均衡。\n\n\n\n**②. 客服端负载均衡——Netflix Ribbon**\n\n\n\nRibbon，主要提供客户侧的软件负载均衡算法。Ribbon客户端组件提供一系列完善的配置选项，比如连接超时、重试、重试算法等。Ribbon内置可插拔、可定制的负载均衡组件。\n\n\n\n**③. 断路器——Netflix Hystrix**\n\n\n\n断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决。如果问题似乎已经得到纠正，应用程序可以尝试调用操作。\n\n\n\n**④. 服务网关——Netflix Zuul**\n\n\n\n类似nginx，反向代理的功能，不过netflix自己增加了一些配合其他组件的特性。\n\n\n\n**⑤. 分布式配置——Spring Cloud Config**\n\n\n\n这个还是静态的，得配合Spring Cloud Bus实现动态的配置更新。\n","tags":["Java团长"]},{"title":"10. Spring","url":"/2019/03/10/10.Spring/","content":"\n**十、Spring / Spring MVC**\n\n\n\n**90. 为什么要使用 spring？**\n\n\n\n**1.简介**\n\n\n\n- 目的：解决企业应用开发的复杂性\n- 功能：使用基本的JavaBean代替EJB，并提供了更多的企业应用功能\n- 范围：任何Java应用\n\n\n\n简单来说，Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。\n\n\n\n**2.轻量**　　\n\n\n\n从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。\n\n\n\n**3.控制反转**　　\n\n\n\nSpring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。\n\n\n\n**4.面向切面**　　\n\n\n\nSpring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。\n\n\n\n**5.容器**\n\n\n\nSpring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。\n\n\n\n**6.框架**\n\n\n\nSpring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。\n\n\n\n所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。\n\n\n\n**91. 解释一下什么是 aop？**\n\n\n\nAOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。\n\n\n\n而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。\n\n\n\n使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”\n\n\n\n**92. 解释一下什么是 ioc？**\n\n\n\nIOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。\n\n　　\n\n1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。\n\n　　\n\nIOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：\n\n\n\n![img](<http://asewqa.nj-dingri.com/bc7568e0e19a56c33b6cd2a3769e730c.png>)\n\n图 IOC解耦过程\n\n　　\n\n大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。\n\n　　\n\n我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：\n\n\n\n![img](<http://asewqa.nj-dingri.com/c0e0b84da5813dacc48ca94e90c10888.png>)\n\n图 拿掉IOC容器后的系统\n\n　　\n\n我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言，这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！\n\n​    \n\n我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下：\n\n​    \n\n软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。\n\n​    \n\n软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。\n\n​    \n\n通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。\n\n\n\n**93. spring 有哪些主要模块？**\n\n\n\nSpring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。\n\n\n\n![img](<http://asewqa.nj-dingri.com/74ecf595caf2fa465d7482c0ad500521.png>)\n\n\n\n更多信息：howtodoinjava.com/java-spring-framework-tutorials/\n\n\n**94. spring 常用的注入方式有哪些？**\n\n\n\nSpring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：\n\n\n\n1. 构造方法注入\n2. setter注入\n3. 基于注解的注入\n\n\n\n**95. spring 中的 bean 是线程安全的吗？**\n\n\n\nSpring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说spring容器中的Bean本身不具备线程安全的特性，但是具体还是要结合具体scope的Bean去研究。\n\n\n\n**96. spring 支持几种 bean 的作用域？**\n\n\n\n当通过spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下5种作用域：\n\n\n\n- singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例\n- prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例\n- request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效\n- session：对于每次HTTP Session，使用session定义的Bean豆浆产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效\n- globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效\n\n\n\n其中比较常用的是singleton和prototype两种作用域。对于singleton作用域的Bean，每次请求该Bean都将获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为；如果一个Bean被设置成prototype作用域，程序每次请求该id的Bean，Spring都会新建一个Bean实例，然后返回给程序。在这种情况下，Spring容器仅仅使用new 关键字创建Bean实例，一旦创建成功，容器不在跟踪实例，也不会维护Bean实例的状态。\n\n\n\n如果不指定Bean的作用域，Spring默认使用singleton作用域。Java在创建Java实例时，需要进行内存申请；销毁实例时，需要完成垃圾回收，这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean被设置成prototype作用域。\n\n\n\n**97. spring 自动装配 bean 有哪些方式？**\n\n\n\nSpring容器负责创建应用程序中的bean同时通过ID来协调这些对象之间的关系。作为开发人员，我们需要告诉Spring要创建哪些bean并且如何将其装配到一起。\n\n\n\nspring中bean装配有两种方式：\n\n\n\n- 隐式的bean发现机制和自动装配\n- 在java代码或者XML中进行显示配置\n\n\n\n当然这些方式也可以配合使用。\n\n\n\n**98. spring 事务实现方式有哪些？**\n\n\n\n1. 编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。\n2. 基于 TransactionProxyFactoryBean 的声明式事务管理\n3. 基于 @Transactional 的声明式事务管理\n4. 基于 Aspectj AOP 配置事务\n\n\n\n**99. 说一下 spring 的事务隔离？**\n\n\n\n事务隔离级别指的是一个事务对数据的修改与另一个并行的事务的隔离程度，当多个事务同时访问相同数据时，如果没有采取必要的隔离机制，就可能发生以下问题：\n\n\n\n- 脏读：一个事务读到另一个事务未提交的更新数据。\n- 幻读：例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。\n- 不可重复读：比方说在同一个事务中先后执行两条一模一样的select语句，期间在此次事务中没有执行过任何DDL语句，但先后得到的结果不一致，这就是不可重复读。\n\n\n\n**100. 说一下 spring mvc 运行流程？**\n\n\n\n**Spring MVC运行流程图：**\n\n\n\n![img](http://asewqa.nj-dingri.com/3b681b57bdb734d27ba26edb8f64c29c.png?)\n\n\n\n**Spring运行流程描述：**\n\n​      \n\n\\1. 用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；\n\n​      \n\n\\2. DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；\n\n​      \n\n\\3. DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(...)方法）\n\n​       \n\n\\4.  提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：\n\n\n\n- HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息\n- 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等\n- 数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等\n- 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中\n\n​      \n\n\\5.  Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；\n\n​      \n\n\\6.  根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；\n\n​      \n\n\\7. ViewResolver 结合Model和View，来渲染视图；\n\n​      \n\n\\8. 将渲染结果返回给客户端。\n\n\n\n**101. spring mvc 有哪些组件？**\n\n\n\nSpring MVC的核心组件：\n\n\n\n1. DispatcherServlet：中央控制器，把请求给转发到具体的控制类\n2. Controller：具体处理请求的控制器\n3. HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略\n4. ModelAndView：服务层返回的数据和视图层的封装类\n5. ViewResolver：视图解析器，解析具体的视图\n6. Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作\n\n\n\n**102. @RequestMapping 的作用是什么？**\n\n\n\nRequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。\n\n\n\nRequestMapping注解有六个属性，下面我们把她分成三类进行说明。\n\n\n\n### **value， method：**\n\n\n\n- value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；\n- method：指定请求的method类型， GET、POST、PUT、DELETE等；\n\n###  \n\n### **consumes，produces**\n\n\n\n- consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html；\n- produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；\n\n###  \n\n### **params，headers**\n\n\n\n- params： 指定request中必须包含某些参数值是，才让该方法处理。\n- headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。\n\n\n\n**103. @Autowired 的作用是什么？**\n\n\n\n《@Autowired用法详解》：blog.csdn.net/u013257679/article/details/52295106\n","tags":["Java团长"]},{"title":"9. 设计模式","url":"/2019/03/09/9.设计模式/","content":"\n**九、设计模式**\n\n\n\n**88. 说一下你熟悉的设计模式？**\n\n\n\n参考：[常用的设计模式汇总，超详细！](http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938221&idx=1&sn=9cb29d1eb0fdbdb5f976306b08d5bdcc&chksm=8d0f32e3ba78bbf547c6039038682706a2eaf83002158c58060d5eb57bdd83eb966a1e223ef6&scene=21#wechat_redirect)\n\n\n\n**89. 简单工厂和抽象工厂有什么区别？**\n\n\n\n**简单工厂模式**：\n\n\n\n这个模式本身很简单而且使用在业务较简单的情况下。一般用于小项目或者具体产品很少扩展的情况（这样工厂类才不用经常更改）。\n\n\n\n它由三种角色组成：\n\n\n\n- 工厂类角色：这是本模式的核心，含有一定的商业逻辑和判断逻辑，根据逻辑不同，产生具体的工厂产品。如例子中的Driver类。\n- 抽象产品角色：它一般是具体产品继承的父类或者实现的接口。由接口或者抽象类来实现。如例中的Car接口。\n- 具体产品角色：工厂类所创建的对象就是此角色的实例。在java中由一个具体类实现，如例子中的Benz、Bmw类。\n\n\n来用类图来清晰的表示下的它们之间的关系：\n\n\n![img](<http://asewqa.nj-dingri.com/1755edf732ee53cc099b0666bb7f00e5.png>)\n\n\n\n**抽象工厂模式：**\n\n\n\n先来认识下什么是产品族： 位于不同产品等级结构中，功能相关联的产品组成的家族。\n\n\n\n![点击查看原始大小图片](<http://asewqa.nj-dingri.com/49223d6c1d419de31d883efef8f164bf.png>)\n\n\n\n图中的BmwCar和BenzCar就是两个产品树（产品层次结构）；而如图所示的BenzSportsCar和BmwSportsCar就是一个产品族。他们都可以放到跑车家族中，因此功能有所关联。同理BmwBussinessCar和BenzBusinessCar也是一个产品族。\n\n\n\n**可以这么说，它和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是三个里面最为抽象、最具一般性的。抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象。**\n\n\n\n而且使用抽象工厂模式还要满足一下条件：\n\n\n\n1. 系统中有多个产品族，而系统一次只可能消费其中一族产品\n2. 同属于同一个产品族的产品以其使用。\n\n\n来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：\n\n\n\n- 抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。\n- 具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。\n- 抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。\n- 具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。\n","tags":["Java团长"]},{"title":"8. 网络","url":"/2019/03/08/8.网络/","content":"\n**网络**\n\n\n\n**79. http 响应码 301 和 302 代表的是什么？有什么区别？**\n\n\n\n答：301，302 都是HTTP状态的编码，都代表着某个URL发生了转移。\n\n\n\n**区别：**\n\n\n\n- 301 redirect: 301 代表永久性转移(Permanently Moved)。\n- 302 redirect: 302 代表暂时性转移(Temporarily Moved )。\n\n\n\n**80. forward 和 redirect 的区别？**\n\n\n\nForward和Redirect代表了两种请求转发方式：直接转发和间接转发。\n\n\n\n**直接转发方式（Forward）**，客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。\n\n\n\n**间接转发方式（Redirect）**实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。\n\n\n\n**举个通俗的例子：**\n\n　　\n\n直接转发就相当于：“A找B借钱，B说没有，B去找C借，借到借不到都会把消息传递给A”；\n\n　　\n\n间接转发就相当于：\"A找B借钱，B说没有，让A去找C借\"。\n\n\n**81. 简述 tcp 和 udp的区别？**\n\n\n\n- TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接。\n- TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。\n- Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。\n- UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。\n- 每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。\n- TCP对系统资源要求较多，UDP对系统资源要求较少。\n\n\n\n**82. tcp 为什么要三次握手，两次不行吗？为什么？**\n\n\n\n为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。\n\n\n\n如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。\n\n\n\n**83. 说一下 tcp 粘包是怎么产生的？**\n\n\n\n**①. 发送方产生粘包**\n\n\n\n采用TCP协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据；但当发送的数据包过于的小时，那么TCP协议默认的会启用Nagle算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。\n\n\n\n![img](<http://asewqa.nj-dingri.com/8c08bd6d7d5491b15abb3e55966ebb83.png>)\n\n\n\n**②. 接收方产生粘包**\n\n\n\n接收方采用TCP协议接收数据时的过程是这样的：数据到底接收方，从网络模型的下方传递至传输层，传输层的TCP协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C语言用recv、read等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 > 应用层拿数据速度）\n\n\n\n![img](<http://asewqa.nj-dingri.com/47c0a5763a5f0e1b86dc0039029a6936.png>)\n\n\n\n**84. OSI 的七层模型都有哪些？**\n\n\n\n1. 应用层：网络服务与最终用户的一个接口。\n\n2. 表示层：数据的表示、安全、压缩。\n\n3. 会话层：建立、管理、终止会话。\n\n4. 传输层：定义传输数据的协议端口号，以及流控和差错校验。\n\n5. 网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。\n\n6. 数据链路层：建立逻辑连接、进行硬件地址寻址、差错校验等功能。\n\n7. 物理层：建立、维护、断开物理连接。\n\n###  \n\n**85. get 和 post 请求有哪些区别？**\n\n\n\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被Bookmark，而POST不可以。\n- GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST么有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n\n\n\n**86. 如何实现跨域？**\n\n\n\n### **方式一：图片ping或script标签跨域**\n\n\n\n**图片ping**常用于跟踪用户点击页面或动态广告曝光次数。\n**script标签**可以得到从其他来源数据，这也是JSONP依赖的根据。\n\n\n\n**方式二：JSONP跨域**\n\n\n\nJSONP（JSON with Padding）是数据格式JSON的一种“使用模式”，可以让网页从别的网域要数据。根据 XmlHttpRequest 对象受到同源策略的影响，而利用 <script>元素的这个开放策略，网页可以得到从其他来源动态产生的JSON数据，而这种使用模式就是所谓的 JSONP。用JSONP抓到的数据并不是JSON，而是任意的JavaScript，用 JavaScript解释器运行而不是用JSON解析器解析。所有，通过Chrome查看所有JSONP发送的Get请求都是js类型，而非XHR。\n\n\n\n![img](<http://asewqa.nj-dingri.com/799909a1e83bed0454eabacf8e5a4917.png>)\n\n缺点：\n\n\n\n- 只能使用Get请求\n\n- 不能注册success、error等事件监听函数，不能很容易的确定JSONP请求是否失败\n\n- JSONP是从其他域中加载代码执行，容易受到跨站请求伪造的攻击，其安全性无法确保\n\n\n\n**方式三：CORS**\n\n\n\nCross-Origin Resource Sharing（CORS）跨域资源共享是一份浏览器技术的规范，提供了 Web 服务从不同域传来沙盒脚本的方法，以避开浏览器的同源策略，确保安全的跨域数据传输。现代浏览器使用CORS在API容器如XMLHttpRequest来减少HTTP请求的风险来源。与 JSONP 不同，CORS 除了 GET 要求方法以外也支持其他的 HTTP 要求。服务器一般需要增加如下响应头的一种或几种：\n\n```\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\n```\n\n\n\n跨域请求默认不会携带Cookie信息，如果需要携带，请配置下述参数：\n\n```\n\"Access-Control-Allow-Credentials\": true\n// Ajax设置\n\"withCredentials\": true\n```\n\n\n\n**方式四：window.name+iframe**\n\n\n\nwindow.name通过在iframe（一般动态创建i）中加载跨域HTML文件来起作用。然后，HTML文件将传递给请求者的字符串内容赋值给window.name。然后，请求者可以检索window.name值作为响应。\n\n\n\n- iframe标签的跨域能力；\n- window.name属性值在文档刷新后依旧存在的能力（且最大允许2M左右）。\n\n\n\n每个iframe都有包裹它的window，而这个window是top window的子窗口。contentWindow属性返回<iframe>元素的Window对象。你可以使用这个Window对象来访问iframe的文档及其内部DOM。\n\n```html\n<!--\n 下述用端口\n 10000表示：domainA\n 10001表示：domainB\n-->\n\n<!-- localhost:10000 -->\n<script>\n  var iframe = document.createElement('iframe');\n  iframe.style.display = 'none'; // 隐藏\n\n  var state = 0; // 防止页面无限刷新\n  iframe.onload = function() {\n      if(state === 1) {\n          console.log(JSON.parse(iframe.contentWindow.name));\n          // 清除创建的iframe\n          iframe.contentWindow.document.write('');\n          iframe.contentWindow.close();\n          document.body.removeChild(iframe);\n      } else if(state === 0) {\n          state = 1;\n          // 加载完成，指向当前域，防止错误(proxy.html为空白页面)\n          // Blocked a frame with origin \"http://localhost:10000\" from accessing a cross-origin frame.\n          iframe.contentWindow.location = 'http://localhost:10000/proxy.html';\n      }\n  };\n\n  iframe.src = 'http://localhost:10001';\n  document.body.appendChild(iframe);\n</script>\n\n<!-- localhost:10001 -->\n<!DOCTYPE html>\n...\n<script>\n  window.name = JSON.stringify({a: 1, b: 2});\n</script>\n</html>\n```\n\n\n\n### **方式五：window.postMessage()**\n\n\n\nHTML5新特性，可以用来向其他所有的 window 对象发送消息。需要注意的是我们必须要保证所有的脚本执行完才发送 MessageEvent，如果在函数执行的过程中调用了它，就会让后面的函数超时无法执行。\n\n\n\n下述代码实现了跨域存储localStorage\n\n```html\n\n<!--\n 下述用端口\n 10000表示：domainA\n 10001表示：domainB\n-->\n\n<!-- localhost:10000 -->\n<iframe src=\"http://localhost:10001/msg.html\" name=\"myPostMessage\" style=\"display:none;\">\n</iframe>\n\n<script>\n  function main() {\n      LSsetItem('test', 'Test: ' + new Date());\n      LSgetItem('test', function(value) {\n          console.log('value: ' + value);\n      });\n      LSremoveItem('test');\n  }\n\n  var callbacks = {};\n  window.addEventListener('message', function(event) {\n      if (event.source === frames['myPostMessage']) {\n          console.log(event)\n          var data = /^#localStorage#(\\d+)(null)?#([\\S\\s]*)/.exec(event.data);\n          if (data) {\n              if (callbacks[data[1]]) {\n                  callbacks[data[1]](data[2] === 'null' ? null : data[3]);\n              }\n              delete callbacks[data[1]];\n          }\n      }\n  }, false);\n\n  var domain = '*';\n  // 增加\n  function LSsetItem(key, value) {\n      var obj = {\n          setItem: key,\n          value: value\n      };\n      frames['myPostMessage'].postMessage(JSON.stringify(obj), domain);\n  }\n  // 获取\n  function LSgetItem(key, callback) {\n      var identifier = new Date().getTime();\n      var obj = {\n          identifier: identifier,\n          getItem: key\n      };\n      callbacks[identifier] = callback;\n      frames['myPostMessage'].postMessage(JSON.stringify(obj), domain);\n  }\n  // 删除\n  function LSremoveItem(key) {\n      var obj = {\n          removeItem: key\n      };\n      frames['myPostMessage'].postMessage(JSON.stringify(obj), domain);\n  }\n</script>\n\n<!-- localhost:10001 -->\n<script>\n  window.addEventListener('message', function(event) {\n    console.log('Receiver debugging', event);\n    if (event.origin == 'http://localhost:10000') {\n      var data = JSON.parse(event.data);\n      if ('setItem' in data) {\n        localStorage.setItem(data.setItem, data.value);\n      } else if ('getItem' in data) {\n        var gotItem = localStorage.getItem(data.getItem);\n        event.source.postMessage(\n          '#localStorage#' + data.identifier +\n          (gotItem === null ? 'null#' : '#' + gotItem),\n          event.origin\n        );\n      } else if ('removeItem' in data) {\n        localStorage.removeItem(data.removeItem);\n      }\n    }\n  }, false);\n</script>\n```\n\n\n\n注意Safari一下，会报错：\n\n\n\n> Blocked a frame with origin “http://localhost:10001” from accessing a frame with origin “http://localhost:10000“. Protocols, domains, and ports must match.\n\n\n\n避免该错误，可以在Safari浏览器中勾选开发菜单==>停用跨域限制。或者只能使用服务器端转存的方式实现，因为Safari浏览器默认只支持CORS跨域请求。\n\n\n\n**方式六：修改document.domain跨子域**\n\n\n\n前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用document.domain进行跨域，所以只能跨子域\n\n\n\n在根域范围内，允许把domain属性的值设置为它的上一级域。例如，在”aaa.xxx.com”域内，可以把domain设置为 “xxx.com” 但不能设置为 “xxx.org” 或者”com”。\n\n> 现在存在两个域名aaa.xxx.com和bbb.xxx.com。在aaa下嵌入bbb的页面，由于其document.name不一致，无法在aaa下操作bbb的js。可以在aaa和bbb下通过js将document.name = 'xxx.com';设置一致，来达到互相访问的作用。\n\n\n\n**方式七：WebSocket**\n\n\n\nWebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很棒的实现。相关文章，请查看：WebSocket、WebSocket-SockJS\n\n\n\n需要注意：WebSocket对象不支持DOM 2级事件侦听器，必须使用DOM 0级语法分别定义各个事件。\n\n\n\n**方式八：代理**\n\n\n\n同源策略是针对浏览器端进行的限制，可以通过服务器端来解决该问题\n\n\n\nDomainA客户端（浏览器） ==> DomainA服务器 ==> DomainB服务器 ==> DomainA客户端（浏览器）\n\n\n\n来源：blog.csdn.net/ligang2585116/article/details/73072868\n\n\n\n**87.说一下 JSONP 实现原理？**\n\n\n\njsonp 即 json+padding，动态创建script标签，利用script标签的src属性可以获取任何域下的js脚本，通过这个特性(也可以说漏洞)，服务器端不在返货json格式，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。\n\n\n\n**（完）**\n\n\n\n\n\n<https://mp.weixin.qq.com/s?timestamp=1553416000&src=3&ver=1&signature=hzqCE-QVHZTc6FGSE*21ZhDBdw8JlRe1yQQ2p1pRbc6V02CQVPs0ErDirVvOzFWXTZrKjW0q3p*7FE6N6grmNePu2sJymgngwL9zuWjcoTYC03Wouho-CfQiu1QjYnHmr0v*GZctrbhUsyRn5SewjYTh4R*8Sgb3QWKpG9SgPS4=>\n","tags":["Java团长"]},{"title":"7. 异常","url":"/2019/03/07/7.异常/","content":"\n**异常**\n\n\n\n**74. throw 和 throws 的区别？**\n\n\n\nthrows是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。\n\n\n\n**75. final、finally、finalize 有什么区别？**\n\n\n\n- final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、修饰变量表示该变量是一个常量不能被重新赋值。\n- finally一般作用在try-catch代码块中，在处理异常的时候，通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，该代码块都会执行，一般用来存放一些关闭资源的代码。\n- finalize是一个方法，属于Object类的一个方法，而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。\n\n\n\n**76. try-catch-finally 中哪个部分可以省略？**\n\n\n\n答：catch 可以省略\n\n\n\n**原因：**\n\n\n\n更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。\n\n\n\n理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。\n\n\n\n至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。\n\n\n\n**77. try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？**\n\n\n\n答：会执行，在 return 前执行。\n\n\n\n### **代码示例1：**\n\n```java\n/*\n * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？\n */\npublic class FinallyDemo2 {\n    public static void main(String[] args) {\n        System.out.println(getInt());\n    }\n\n    public static int getInt() {\n        int a = 10;\n        try {\n            System.out.println(a / 0);\n            a = 20;\n        } catch (ArithmeticException e) {\n            a = 30;\n            return a;\n            /*\n             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了\n             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40\n             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30\n             */\n        } finally {\n            a = 40;\n        }\n\n//      return a;\n    }\n}\n```\n\n\n\n执行结果：30\n\n\n\n### **代码示例2：**\n\n```java\npackage com.java_02;\n\n/*\n * java面试题--如果catch里面有return语句，finally里面的代码还会执行吗？\n */\npublic class FinallyDemo2 {\n    public static void main(String[] args) {\n        System.out.println(getInt());\n    }\n\n    public static int getInt() {\n        int a = 10;\n        try {\n            System.out.println(a / 0);\n            a = 20;\n        } catch (ArithmeticException e) {\n            a = 30;\n            return a;\n            /*\n             * return a 在程序执行到这一步的时候，这里不是return a 而是 return 30；这个返回路径就形成了\n             * 但是呢，它发现后面还有finally，所以继续执行finally的内容，a=40\n             * 再次回到以前的路径,继续走return 30，形成返回路径之后，这里的a就不是a变量了，而是常量30\n             */\n        } finally {\n            a = 40;\n            return a; //如果这样，就又重新形成了一条返回路径，由于只能通过1个return返回，所以这里直接返回40\n        }\n\n//      return a;\n    }\n}\n```\n\n\n\n执行结果：40\n\n\n\n**78. 常见的异常类有哪些？**\n\n\n\n- NullPointerException：当应用程序试图访问空对象时，则抛出该异常。\n- SQLException：提供关于数据库访问错误或其他错误信息的异常。\n- IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。\n- NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。\n- FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。\n- IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。\n- ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。\n- ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。\n- IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。\n- ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。\n- NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。\n- NoSuchMethodException：无法找到某一特定方法时，抛出该异常。\n- SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。\n- UnsupportedOperationException：当不支持请求的操作时，抛出该异常。\n- RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。\n\n\n\n**（完）**\n\n\n\n\n\n<https://mp.weixin.qq.com/s?timestamp=1553416000&src=3&ver=1&signature=hzqCE-QVHZTc6FGSE*21ZhDBdw8JlRe1yQQ2p1pRbc6V02CQVPs0ErDirVvOzFWXTZrKjW0q3p*7FE6N6grmNePu2sJymgngwL9zuWjcoTY1sUl9shln-9tus9v5l6QFBsKNBnAwR8BpdhPFywmzI35kEjKlc3xGp3V5XMTjfWw=>\n","tags":["Java团长"]},{"title":"6. 缓存","url":"/2019/03/06/6.缓存/","content":"\n1. redis是什么\n\n   - redis本质上是一个Key-Value类型的内存数据库，性能出色且支持多种数据类型，缺点是受限于物理内存只适合小数据量的高性能操作上。\n   - redis为什么这么快\n     - 完全基于内存\n     - 定制化的数据结构\n     - 单线程避免上下文切换和竞争条件\n     - 使用多路IO复用模型，NIO\n   - redis采用一个线程处理所有的网络请求，其他模块仍用了多线程\n     - **多路复用**技术处理客户端连接(多个网络连接同一个处理线程)\n     - 非阻塞IO处理数据的读写\n     - 指令队列，redis为每个客户端关联一个指令队列\n     - 响应队列：redis为每个客户端关联一个响应队列\n   - redis定时任务(定时回收超时的key)会记录在一个最小堆的数据结构中，最先执行的任务在最上面\n\n2. redis有哪些数据结构，底层怎么实现\n\n   - 五大数据类型\n     - string字符串，二进制安全(自定义了字符串存储，可以存放\\0)，命令：get、set、mset(原子操作)、setex设置过期时间、ttl获取过期时间、incr自增、decr自减、incrby增加、decrby减少、del\n     - hash键值对集合，命令：hset、hget、hdel、hexists、hkeys、hvals、hlen、hgetall\n     - list有序集合，命令：lpush插入头部、lpop移除并返回头、lrange区间、lset、lindex、rpop、rpush\n     - set无序集合，命令：sadd、scard集合数量、sinter全部成员、spop\n     - zset有序的set，zrange\n   - 底层数据结构\n     - 简单动态字符串SDS\n     - 双向链表\n     - 字典(符号表、关联数组、映射、map)：保存键值对，通常有两个hash，一个平时用，一个rehash用\n     - 跳跃表skiplist，分层的有序链表\n     - 整数集合intset，存储int8，长度可升级，不可降级\n     - 压缩列表ziplist，为节省内存开发\n   - `object encoding key` 可查看底层存储类型\n   - `setnx key value` 当key不存在时设置value并返回1，否则返回0，可用于分布式锁，**SET** if **N**ot e**X**ists\n\n3. redis缓存穿透，缓存雪崩\n\n   - 缓存一致性问题\n     - 合适的缓存更新策略\n     - 更新数据后更新缓存(消息队列)\n     - 缓存失败增加重试机制\n   - 缓存击穿问题：恶意大量请求没有缓存的数据\n     - 使用互斥锁(分布式互斥锁，更新缓存时加锁)\n     - 接口限流、降级、熔断\n     - 布隆过滤器，所有存在的key都加入布隆过滤器，对于请求不在布隆过滤器里的key不处理\n   - 缓存雪崩问题：同一时间大量key失效，然后一大波请求瞬间落到数据库\n     - 加锁\n     - 两级缓存，一级设置超时，二级不超时，一级超时时查询二级，一级更新时更新二级\n     - 过期时间增加随机数\n\n4. redis的并发竞争问题怎么解决？\n\n   Redis为单进程单线程模式，采用队列模式将并发访问变为串行访问，redis本身没有锁的概念，redis的多个客户端也不存在竞争，但是jedis客户端会redis进行并发访问时会发生超时、阻塞等问题，通常有2种解决办法：\n\n   - 客户端角度，使用连接池与redis通信，并对读写操作加锁\n   - 服务器角度，利用setnx实现锁\n\n5. redis持久化的方式，优缺点是什么，怎么实现的\n\n   - RDB：对redis中的数据执行周期性的持久化\n     - 生成多个数据文件，适合做冷备\n     - 对读写影响较小\n     - 重建更快速\n     - 会丢失一段时间的数据\n     - 数据文件特别大时会导致服务短暂不可用\n   - AOF：对每条写入命令以append-only的模式写入一个日志文件，在redis重启时候通过回放重建\n     - 丢失数据时间短\n     - 写入快\n     - 日志文件可读性好，可人工修改\n     - AOF日志比RDB大\n   - 可同时启用另种持久化模式\n\n6. redis的数据淘汰策略(当内存不足以容纳新写入的数据时)\n\n   - volatile-lru：在设置了过期时间的键空间中，移除最近最少使用的\n   - allkeys-lru：移除最近最少使用的key\n   - volatile-random：在设置了过期时间的键空间中随机移除一个键\n   - allkeys-random：随机移除一个键\n   - volatile-ttl：在设置了过期时间的键空间中，有更早过期时间的优先移除\n   - noeviction：不做过期处理，返回写错误\n\n7. Redis集群方案\n\n   ![](<http://asewqa.nj-dingri.com/c15a14767f00bcb58878b1d4b42ba71d.png>)\n\n   图中是6个redis实例构成的集群：\n\n   - 6379端口为客户端通讯端口\n   - 16379端口为集群总线端口\n   - 集群内部划分为16384个数据分槽，分布在三个主redis中。\n   - 从redis中没有分槽，不会参与集群投票，也不会帮忙加快读取数据，仅仅作为主机的备份。\n   - 三个主节点中平均分布着16384数据分槽的三分之一，每个节点中不会存有有重复数据，仅仅有自己的从机帮忙冗余。\n\n8. redis集群高可用原理\n\n   - Redis Sentinel （哨兵）是 Redis 的官方高可用解决方案，完成以下任务：\n     - 监控，不断检查主从实例是否正常\n     - 通知，实例不正常时可通过API通知\n     - 自动故障转移\n     - 配置提供者，客户单可连接哨兵查询主机地址\n\n   - 哨兵的启动和redis实例没有关系，可以在任何机器上启动，建议至少启动两个哨兵防止物理机宕机\n\n     ```conf\n     # redis备机配置\n     slaveof 192.168.1.100 6379\n\n     # redis备转主\n     slaveof no one\n\n     sentinel monitor master 192.168.1.100 6379 2\n     # 最后的2代表集群中有两个哨兵认为master挂了时才进行主备切换，redis备机配置\n     ```\n\n9. redis缓存分片\n\n   - 客户端分片(可预分片，在项目初期分片，后期只是移动分片)\n   - 代理协助分片\n   - 服务器分片(查询路由)，随机连接一个节点，由节点转发请求\n\n10. Redis事务相关命令\n\n   - MULTI，标记事务开始，后续命令放入队列\n   - EXEC，执行命令队列\n   - DISCARD，清除命令队列，并回到正常模式\n   - WATCH，在watch key之后，如果在exec之前key被修改，则exec不执行\n   - UNWATCH\n\n\n\n<https://www.cnblogs.com/ysocean/p/9080942.html>\n\n<https://blog.csdn.net/fanrenxiang/article/details/80542580>\n\n<https://www.cnblogs.com/shamo89/p/8385390.html>\n","tags":["Java学习"]},{"title":"6. Java Web","url":"/2019/03/06/6.Java Web/","content":"\n**Java Web**\n\n\n\n**64. jsp 和 servlet 有什么区别？**\n\n\n\n1. jsp经编译后就变成了Servlet.（JSP的本质就是Servlet，JVM只能识别java的类，不能识别JSP的代码，Web容器将JSP的代码编译成JVM能够识别的java类）\n2. jsp更擅长表现于页面显示，servlet更擅长于逻辑控制。\n3. Servlet中没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n4. Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。\n\n\n\n**65. jsp 有哪些内置对象？作用分别是什么？**\n\n\n\nJSP有9个内置对象：\n\n\n\n- request：封装客户端的请求，其中包含来自GET或POST请求的参数；\n- response：封装服务器对客户端的响应；\n- pageContext：通过该对象可以获取其他对象；\n- session：封装用户会话的对象；\n- application：封装服务器运行环境的对象；\n- out：输出服务器响应的输出流对象；\n- config：Web应用的配置对象；\n- page：JSP页面本身（相当于Java程序中的this）；\n- exception：封装页面抛出异常的对象。\n\n\n**66. 说一下 jsp 的 4 种作用域？**\n\n\n\nJSP中的四种作用域包括page、request、session和application，具体来说：\n\n\n\n- **page**代表与一个页面相关的对象和属性。\n- **request**代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。\n- **session**代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。\n- **application**代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。\n\n\n**67. session 和 cookie 有什么区别？**\n\n\n\n- 由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n- 思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n- Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。\n\n\n\n**68. 说一下 session 的工作原理？**\n\n\n\n其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。\n\n\n\n**69. 如果客户端禁止 cookie 能实现 session 还能用吗？**\n\n\n\nCookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。\n\n\n\n假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：\n\n\n\n1. 设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“--enable-trans-sid”选项，让PHP自动跨页传递Session ID。\n2. 手动通过URL传值、隐藏表单传递Session ID。\n3. 用文件、数据库等形式保存Session ID，在跨页过程中手动调用。\n\n\n\n**70. spring mvc 和 struts 的区别是什么？**\n\n\n\n- ### 拦截机制的不同\n\n\n\nStruts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。\n\n　　\n\nSpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。\n\n　　\n\nStruts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。\n\n###  \n\n- ### 底层框架的不同\n\n　　\n\nStruts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。\n\n\n\n- ### 性能方面\n\n\n\nStruts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。\n\n\n\n- ### 配置方面\n\n　　\n\nspring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。\n\n\n\n**71. 如何避免 sql 注入？**\n\n\n\n1. PreparedStatement（简单又有效的方法）\n2. 使用正则表达式过滤传入的参数\n3. 字符串过滤\n4. JSP中调用该函数检查是否包函非法字符\n5. JSP页面判断代码\n\n\n\n**72. 什么是 XSS 攻击，如何避免？**\n\nXSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。\n\n\n\nXSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。\n\n\n\n**73. 什么是 CSRF 攻击，如何避免？**\n\n\n\nCSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫**跨站请求伪造**。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。\n\n\n\n## 如何避免：\n\n\n\n### 1. 验证 HTTP Referer 字段\n\n\n\n> HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF\n> 攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。\n\n###  \n\n### 2. 使用验证码\n\n\n\n> 关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。\n\n###  \n\n### 3. 在请求地址中添加token并验证\n\n\n\n> CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。\n> 对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。\n> 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了。\n\n###  \n\n### 4. 在HTTP 头中自定义属性并验证\n\n\n\n> 这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。\n","tags":["Java团长"]},{"title":"5. 对象拷贝","url":"/2019/03/05/5.对象拷贝/","content":"\n**对象拷贝**\n\n\n\n**61. 为什么要使用克隆？**\n\n\n\n想对一个对象进行处理，又想保留原有的数据进行接下来的操作，就需要克隆了，Java语言中克隆针对的是类的实例。\n\n\n\n**62. 如何实现对象克隆？**\n\n\n\n有两种方式：\n\n\n\n1). 实现Cloneable接口并重写Object类中的clone()方法；\n\n  \n\n2). 实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下：\n\n```java\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\n\npublic class MyUtil {\n\n    private MyUtil() {\n        throw new AssertionError();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T extends Serializable> T clone(T obj) throws Exception {\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bout);\n        oos.writeObject(obj);\n\n        ByteArrayInputStream bin = new ByteArrayInputStream(bout.toByteArray());\n        ObjectInputStream ois = new ObjectInputStream(bin);\n        return (T) ois.readObject();\n\n        // 说明：调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义\n        // 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放\n    }\n}\n```\n\n\n\n下面是测试代码：\n\n```java\nimport java.io.Serializable;\n\n/**\n * 人类\n * @author nnngu\n *\n */\nclass Person implements Serializable {\n    private static final long serialVersionUID = -9102017020286042305L;\n\n    private String name;    // 姓名\n    private int age;        // 年龄\n    private Car car;        // 座驾\n\n    public Person(String name, int age, Car car) {\n        this.name = name;\n        this.age = age;\n        this.car = car;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public Car getCar() {\n        return car;\n    }\n\n    public void setCar(Car car) {\n        this.car = car;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person [name=\" + name + \", age=\" + age + \", car=\" + car + \"]\";\n    }\n\n}\n```\n\n```java\n/**\n * 小汽车类\n * @author nnngu\n *\n */\nclass Car implements Serializable {\n    private static final long serialVersionUID = -5713945027627603702L;\n\n    private String brand;       // 品牌\n    private int maxSpeed;       // 最高时速\n\n    public Car(String brand, int maxSpeed) {\n        this.brand = brand;\n        this.maxSpeed = maxSpeed;\n    }\n\n    public String getBrand() {\n        return brand;\n    }\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public int getMaxSpeed() {\n        return maxSpeed;\n    }\n\n    public void setMaxSpeed(int maxSpeed) {\n        this.maxSpeed = maxSpeed;\n    }\n\n    @Override\n    public String toString() {\n        return \"Car [brand=\" + brand + \", maxSpeed=\" + maxSpeed + \"]\";\n    }\n\n}\n```\n\n```java\nclass CloneTest {\n\n    public static void main(String[] args) {\n        try {\n            Person p1 = new Person(\"郭靖\", 33, new Car(\"Benz\", 300));\n            Person p2 = MyUtil.clone(p1);   // 深度克隆\n            p2.getCar().setBrand(\"BYD\");\n            // 修改克隆的Person对象p2关联的汽车对象的品牌属性\n            // 原来的Person对象p1关联的汽车不会受到任何影响\n            // 因为在克隆Person对象时其关联的汽车对象也被克隆了\n            System.out.println(p1);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n注意：基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种是方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是好过把问题留到运行时。\n\n\n\n**63. 深拷贝和浅拷贝区别是什么？**\n\n\n\n- 浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）\n- 深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）\n\n\n\n<https://mp.weixin.qq.com/s/tTC5MiECUMObDtRnXZp1Zg>\n","tags":["Java团长"]},{"title":"4. 反射","url":"/2019/03/04/4.反射/","content":"\n**反射**\n\n\n\n**57. 什么是反射？**\n\n\n\n反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力\n\n## Java反射：\n\n\n\n在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法？对于任意一个对象，能否调用它的任意一个方法\n\nJava反射机制主要提供了以下功能：\n\n\n\n- 在运行时判断任意一个对象所属的类。\n- 在运行时构造任意一个类的对象。\n- 在运行时判断任意一个类所具有的成员变量和方法。\n- 在运行时调用任意一个对象的方法。\n\n\n\n**58. 什么是 java 序列化？什么情况下需要序列化？**\n\n\n\n简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。\n\n什么情况下需要序列化：\n\n\n\na）当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；\nb）当你想用套接字在网络上传送对象的时候；\nc）当你想通过RMI传输对象的时候；\n\n\n\n**59. 动态代理是什么？有哪些应用？**\n\n\n\n动态代理：\n\n\n\n当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。\n\n\n\n动态代理的应用：\n\n\n\n- Spring的AOP\n- 加事务\n- 加权限\n- 加日志\n\n\n\n**60. 怎么实现动态代理？**\n\n\n\n首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,其实他只是一个产生代理对象的工具类）。利用到InvocationHandler，拼接代理类源码，将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。\n\n\n\n<https://mp.weixin.qq.com/s/tTC5MiECUMObDtRnXZp1Zg>\n","tags":["Java团长"]},{"title":"3. 多线程","url":"/2019/03/03/3.多线程/","content":"\n### **多线程**\n\n\n\n**35. 并行和并发有什么区别？**\n\n\n\n- 并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔发生。\n- 并行是在不同实体上的多个事件，并发是在同一实体上的多个事件。\n- 在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。\n\n\n\n所以并发编程的目标是充分的利用处理器的每一个核，以达到最高的处理性能。\n\n\n\n**36. 线程和进程的区别？**\n\n\n\n简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。\n\n\n\n**37. 守护线程是什么？**\n\n\n\n守护线程（即daemon thread），是个服务线程，准确地来说就是服务其他的线程。\n\n\n\n**38. 创建线程有哪几种方式？**\n\n\n\n①. 继承Thread类创建线程类\n\n\n\n- 定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。\n- 创建Thread子类的实例，即创建了线程对象。\n- 调用线程对象的start()方法来启动该线程。\n\n\n\n②. 通过Runnable接口创建线程类\n\n\n\n- 定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。\n- 创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。\n- 调用线程对象的start()方法来启动该线程。\n\n\n\n③. 通过Callable和Future创建线程\n\n\n\n- 创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。\n- 创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。\n- 使用FutureTask对象作为Thread对象的target创建并启动新线程。\n- 调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。\n\n\n\n**39. 说一下 runnable 和 callable 有什么区别？**\n\n\n\n有点深的问题了，也看出一个Java程序员学习知识的广度。\n\n\n\n- Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹地去执行run()方法中的代码而已；\n- Callable接口中的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。\n\n\n\n**40. 线程有哪些状态？**\n\n\n\n线程通常都有五种状态，创建、就绪、运行、阻塞和死亡。\n\n\n\n- 创建状态。在生成线程对象，并没有调用该对象的start方法，这是线程处于创建状态。\n- 就绪状态。当调用了线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有把该线程设置为当前线程，此时处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。\n- 运行状态。线程调度程序将处于就绪状态的线程设置为当前线程，此时线程就进入了运行状态，开始运行run函数当中的代码。\n- 阻塞状态。线程正在运行的时候，被暂停，通常是为了等待某个时间的发生(比如说某项资源就绪)之后再继续运行。sleep,suspend，wait等方法都可以导致线程阻塞。\n- 死亡状态。如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪 　　\n\n\n\n**41. sleep() 和 wait() 有什么区别？**\n\n\n\nsleep()：方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep() 是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep() 方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。\n\n\n\nwait()：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify，notifyAll方法来唤醒等待的线程\n\n\n\n**42. notify()和 notifyAll()有什么区别？**\n\n\n\n- 如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。\n- 当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。\n- 优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。\n\n\n\n**43. 线程的 run()和 start()有什么区别？**\n\n\n\n每个线程都是通过某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。\n\n\n\nstart()方法来启动一个线程，真正实现了多线程运行。这时无需等待run方法体代码执行完毕，可以直接继续执行下面的代码； 这时此线程是处于就绪状态， 并没有运行。 然后通过此Thread类调用方法run()来完成其运行状态， 这里方法run()称为线程体，它包含了要执行的这个线程的内容， Run方法运行结束， 此线程终止。然后CPU再调度其它线程。\n\n\n\nrun()方法是在本线程里的，只是线程里的一个函数,而不是多线程的。 如果直接调用run(),其实就相当于是调用了一个普通函数而已，直接待用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有线程的特征，所以在多线程执行时要使用start()方法而不是run()方法。\n\n\n\n**44. 创建线程池有哪几种方式？**\n\n\n\n①. newFixedThreadPool(int nThreads)\n\n\n\n创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。\n\n\n\n②. newCachedThreadPool()\n\n\n\n创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。\n\n\n\n③. newSingleThreadExecutor()\n\n\n\n这是一个单线程的Executor，它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的来替代它；它的特点是能确保依照任务在队列中的顺序来串行执行。\n\n\n\n④. newScheduledThreadPool(int corePoolSize)\n\n\n\n创建了一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer。\n\n\n\n**45. 线程池都有哪些状态？**\n\n\n\n线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。\n\n线程池各个状态切换框架图：\n\n![img](<http://asewqa.nj-dingri.com/0927b6dbd1ec8abe96742abafca5574e.png>)\n\n\n\n**46. 线程池中 submit()和 execute()方法有什么区别？**\n\n\n\n- 接收的参数不一样\n- submit有返回值，而execute没有\n- submit方便Exception处理\n\n\n\n**47. 在 java 程序中怎么保证多线程的运行安全？**\n\n\n\n线程安全在三个方面体现：\n\n\n\n- 原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作，（atomic,synchronized）；\n- 可见性：一个线程对主内存的修改可以及时地被其他线程看到，（synchronized,volatile）；\n- 有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，（happens-before原则）。\n\n\n\n**48. 多线程锁的升级原理是什么？**\n\n\n\n在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态会随着竞争情况逐渐升级。锁可以升级但不能降级。\n\n\n\n锁升级的图示过程：\n\n\n\n![img](<http://asewqa.nj-dingri.com/2e5148fc081b0e3bff0b7ecda095f16f.png>)\n\n\n\n**49. 什么是死锁？**\n\n\n\n死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。是操作系统层面的一个错误，是进程死锁的简称，最早在 1965 年由 Dijkstra 在研究银行家算法时提出的，它是计算机操作系统乃至整个并发程序设计领域最难处理的问题之一。\n\n\n\n**50. 怎么防止死锁？**\n\n\n\n死锁的四个必要条件：\n\n\n\n- 互斥条件：进程对所分配到的资源不允许其他进程进行访问，若其他进程访问该资源，只能等待，直至占有该资源的进程使用完成后释放该资源\n- 请求和保持条件：进程获得一定的资源之后，又对其他资源发出请求，但是该资源可能被其他进程占有，此事请求阻塞，但又对自己获得的资源保持不放\n- 不可剥夺条件：是指进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用完后自己释放\n- 环路等待条件：是指进程发生死锁后，若干进程之间形成一种头尾相接的循环等待资源关系\n\n\n\n这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之 一不满足，就不会发生死锁。\n\n\n\n理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和 解除死锁。\n\n\n\n所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确 定资源的合理分配算法，避免进程永久占据系统资源。\n\n\n\n此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。\n\n\n**51. ThreadLocal 是什么？有哪些使用场景？**\n\n\n\n线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。\n\n\n\n**52.说一下 synchronized 底层实现原理？**\n\n\n\nsynchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。\n\n\n\nJava中每一个对象都可以作为锁，这是synchronized实现同步的基础：\n\n\n\n- 普通同步方法，锁是当前实例对象\n- 静态同步方法，锁是当前类的class对象\n- 同步方法块，锁是括号里面的对象\n\n\n**53. synchronized 和 volatile 的区别是什么？**\n\n\n\n- volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。\n- volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。\n- volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。\n- volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。\n- volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。\n\n\n\n**54. synchronized 和 Lock 有什么区别？**\n\n\n\n- 首先synchronized是java内置关键字，在jvm层面，Lock是个java类；\n- synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；\n- synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；\n- 用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；\n- synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；\n- Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。\n\n\n\n**55. synchronized 和 ReentrantLock 区别是什么？**\n\n\n\nsynchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上：\n\n\n\n- ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁\n- ReentrantLock可以获取各种锁的信息\n- ReentrantLock可以灵活地实现多路通知\n\n\n\n另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。\n\n\n**56. 说一下 atomic 的原理？**\n\n\n\nAtomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。\n\n\n\nAtomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。\n\n\n\n\n\n<https://mp.weixin.qq.com/s/l92FuvfRrk5_dYSJ5gkarw>\n","tags":["Java团长"]},{"title":"2. 容器","url":"/2019/03/02/2.容器/","content":"\n**容器**\n\n\n\n**18. java 容器都有哪些？**\n\n\n\n## 常用容器的图录：\n\n![img](http://asewqa.nj-dingri.com/c9db8816948f814dff793061bcfd66a4.png)\n\n**19. Collection 和 Collections 有什么区别？**\n\n- java.util.Collection 是一个集合接口（集合类的一个顶级接口）。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。\n- Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。\n\n\n\n\n\n**20. List、Set、Map 之间的区别是什么？**\n\n\n\n![img](<http://asewqa.nj-dingri.com/9e3ef415888e627b024ff4baad4afeed.png>)\n\n\n\n**21. HashMap 和 Hashtable 有什么区别？**\n\n\n\n- hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。\n- hashTable同步的，而HashMap是非同步的，效率上逼hashTable要高。\n- hashMap允许空键值，而hashTable不允许。\n\n\n\n**22. 如何决定使用 HashMap 还是 TreeMap？**\n\n\n\n对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。\n\n\n\n**23. 说一下 HashMap 的实现原理？**\n\n\n\nHashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。\n\nHashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n\n当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。\n\n需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)\n\n**24. 说一下 HashSet 的实现原理？**\n\n\n\n- HashSet底层由HashMap实现\n- HashSet的值存放于HashMap的key上\n- HashMap的value统一为PRESENT\n\n\n\n**25. ArrayList 和 LinkedList 的区别是什么？**\n\n\n\n最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。\n\n**26. 如何实现数组和 List 之间的转换？**\n\n\n\n- List转换成为数组：调用ArrayList的toArray方法。\n- 数组转换成为List：调用Arrays的asList方法。\n\n\n**27. ArrayList 和 Vector 的区别是什么？**\n\n\n\n- Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。\n- ArrayList比Vector快，它因为有同步，不会过载。\n- ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。\n\n\n\n**28. Array 和 ArrayList 有何区别？**\n\n\n\n- Array可以容纳基本类型和对象，而ArrayList只能容纳对象。\n- Array是指定大小的，而ArrayList大小是固定的。\n- Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。\n\n\n\n**29. 在 Queue 中 poll()和 remove()有什么区别？**\n\n\n\npoll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。\n\n**30. 哪些集合类是线程安全的？**\n\n\n\n- vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。\n- statck：堆栈类，先进后出。\n- hashtable：就比hashmap多了个线程安全。\n- enumeration：枚举，相当于迭代器。\n\n\n\n**31. 迭代器 Iterator 是什么？**\n\n\n\n迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。\n\n\n\n**32. Iterator 怎么使用？有什么特点？**\n\n\n\nJava中的Iterator功能比较简单，并且只能单向移动：\n\n　　\n\n(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。\n\n　　\n\n(2) 使用next()获得序列中的下一个元素。\n\n　　\n\n(3) 使用hasNext()检查序列中是否还有元素。\n\n　　\n\n(4) 使用remove()将迭代器新返回的元素删除。\n\n　　\n\nIterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。\n\n\n**33. Iterator 和 ListIterator 有什么区别？**\n\n\n\n- Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。\n- Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。\n- ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。\n\n\n\n<https://mp.weixin.qq.com/s?timestamp=1552728465&src=3&ver=1&signature=gK0NJRMA866*5jOq1upuX5aDUwU60eAF1zMN3MG9oqmi51ujXv30QU44uRvM3007QbYpatCeREUVgTec6qNzXmmGWBwxwPUgIEkZYFY6AftVYed-ZNHrTkWhIGfpT3naB7u-I78TIcBvpndZJabPIKGGnvbtSoOuBEeOsiIDQUQ=>\n","tags":["Java团长"]},{"title":"1. Java 基础","url":"/2019/03/01/1.Java 基础/","content":"\n### **Java 基础**\n\n\n\n**1. JDK 和 JRE 有什么区别？**\n\n\n\n- JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。\n- JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。\n\n\n\n具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。\n\n\n\n**2. == 和 equals 的区别是什么？**\n\n\n\n**== 解读**\n\n\n\n对于基本类型和引用类型 == 的作用效果是不同的，如下所示：\n\n\n\n- 基本类型：比较的是值是否相同；\n- 引用类型：比较的是引用是否相同；\n\n\n\n代码示例：\n\n```java\nString x = \"string\";\nString y = \"string\";\nString z = new String(\"string\");\nSystem.out.println(x==y); // true\nSystem.out.println(x==z); // false\nSystem.out.println(x.equals(y)); // true\nSystem.out.println(x.equals(z)); // true\n```\n\n\n\n代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。\n\n\n\n**equals 解读**\n\n\n\nequals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。\n\n\n\n首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：\n\n```java\nclass Cat {\n    public Cat(String name) {\n        this.name = name;\n    }\n\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\nCat c1 = new Cat(\"王磊\");\nCat c2 = new Cat(\"王磊\");\nSystem.out.println(c1.equals(c2)); // false\n```\n\n\n\n输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n\n\n原来 equals 本质上就是 ==。\n\n那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：\n\n```java\nString s1 = new String(\"老王\");\nString s2 = new String(\"老王\");\nSystem.out.println(s1.equals(s2)); // true\n```\n\n\n\n同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：\n\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n\n\n原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。\n\n\n\n**总结** ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。\n\n\n\n**3. 两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？**\n\n\n\n不对，两个对象的 hashCode()相同，equals()不一定 true。\n\n\n\n代码示例：\n\n```java\nString str1 = \"通话\";\nString str2 = \"重地\";\nSystem.out.println(String.format(\"str1：%d | str2：%d\",  str1.hashCode(),str2.hashCode()));\nSystem.out.println(str1.equals(str2));\n```\n\n\n\n执行的结果：\n\n\n\nstr1：1179395 | str2：1179395\n\n\n\nfalse\n\n\n\n代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。\n\n\n\n**4. final 在 java 中有什么作用？**\n\n\n\n- final 修饰的类叫最终类，该类不能被继承。\n- final 修饰的方法不能被重写。\n- final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。\n\n\n\n**5. java 中的 Math.round(-1.5) 等于多少？**\n\n\n\n等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。\n\n\n\n**6. String 属于基础的数据类型吗？**\n\n\n\nString 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。\n\n\n\n**7. java 中操作字符串都有哪些类？它们之间有什么区别？**\n\n\n\n操作字符串的类有：String、StringBuffer、StringBuilder。\n\n\n\nString 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。\n\n\n\nStringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。\n\n\n\n**8. String str=\"i\"与 String str=new String(\"i\")一样吗？**\n\n\n\n不一样，因为内存的分配方式不一样。String str=\"i\"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(\"i\") 则会被分到堆内存中。\n\n\n\n**9. 如何将字符串反转？**\n\n\n\n使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。\n\n\n\n示例代码：\n\n```java\n\n// StringBuffer reverse\nStringBuffer stringBuffer = new StringBuffer();\nstringBuffer.append(\"abcdefg\");\nSystem.out.println(stringBuffer.reverse()); // gfedcba\n// StringBuilder reverse\nStringBuilder stringBuilder = new StringBuilder();\nstringBuilder.append(\"abcdefg\");\nSystem.out.println(stringBuilder.reverse()); // gfedcba\n```\n\n\n\n**10. String 类的常用方法都有那些？**\n\n\n\n- indexOf()：返回指定字符的索引。\n- charAt()：返回指定索引处的字符。\n- replace()：字符串替换。\n- trim()：去除字符串两端空白。\n- split()：分割字符串，返回一个分割后的字符串数组。\n- getBytes()：返回字符串的 byte 类型数组。\n- length()：返回字符串长度。\n- toLowerCase()：将字符串转成小写字母。\n- toUpperCase()：将字符串转成大写字符。\n- substring()：截取字符串。\n- equals()：字符串比较。\n\n\n\n**11. 抽象类必须要有抽象方法吗？**\n\n\n\n不需要，抽象类不一定非要有抽象方法。\n\n\n\n示例代码：\n\n```java\nabstract class Cat {\n    public static void sayHi() {\n        System.out.println(\"hi~\");\n    }\n}\n```\n\n\n\n上面代码，抽象类并没有抽象方法但完全可以正常运行。\n\n\n\n**12. 普通类和抽象类有哪些区别？**\n\n\n\n- 普通类不能包含抽象方法，抽象类可以包含抽象方法。\n- 抽象类不能直接实例化，普通类可以直接实例化。\n\n\n\n**13. 抽象类能使用 final 修饰吗？**\n\n\n\n不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：\n\n\n\n![img](<http://asewqa.nj-dingri.com/f140ab03938a9e4bde42bb9bfce957d8.png>)\n\n\n\n**14. 接口和抽象类有什么区别？**\n\n\n\n- 实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。\n- 构造函数：抽象类可以有构造函数；接口不能有。\n- main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。\n- 实现数量：类可以实现很多个接口；但是只能继承一个抽象类。\n- 访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。\n\n\n\n**15. java 中 IO 流分为几种？**\n\n\n\n按功能来分：输入流（input）、输出流（output）。\n\n\n\n按类型来分：字节流和字符流。\n\n\n\n字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。\n\n\n\n**16. BIO、NIO、AIO 有什么区别？**\n\n\n\n- BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。\n- NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。\n- AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。\n\n\n\n**17. Files的常用方法都有哪些？**\n\n\n\n- Files.exists()：检测文件路径是否存在。\n- Files.createFile()：创建文件。\n- Files.createDirectory()：创建文件夹。\n- Files.delete()：删除一个文件或目录。\n- Files.copy()：复制文件。\n- Files.move()：移动文件。\n- Files.size()：查看文件个数。\n- Files.read()：读取文件。\n- Files.write()：写入文件。\n\n\n\n\n\n<https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&mid=2651938287&idx=2&sn=5d983591e8d8206af557ad9e45431173&chksm=8d0f32a1ba78bbb772cf14abd54ea463e564b74a8eeb8323d8fbbb0b49210cda2a8c1718c5a5&scene=27#wechat_redirect>\n","tags":["Java团长"]},{"title":"0. 目录","url":"/2019/02/28/0.目录/","content":"\n**一、Java 基础**\n\n1.JDK 和 JRE 有什么区别？\n\n2.== 和 equals 的区别是什么？\n\n3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？\n\n4.final 在 java 中有什么作用？\n\n5.java 中的 Math.round(-1.5) 等于多少？\n\n6.String 属于基础的数据类型吗？\n\n7.java 中操作字符串都有哪些类？它们之间有什么区别？\n\n8.String str=\"i\"与 String str=new String(\"i\")一样吗？\n\n9.如何将字符串反转？\n\n10.String 类的常用方法都有那些？\n\n11.抽象类必须要有抽象方法吗？\n\n12.普通类和抽象类有哪些区别？\n\n13.抽象类能使用 final 修饰吗？\n\n14.接口和抽象类有什么区别？\n\n15.java 中 IO 流分为几种？\n\n16.BIO、NIO、AIO 有什么区别？\n\n17.Files的常用方法都有哪些？\n\n**二、容器**\n\n18.java 容器都有哪些？\n\n19.Collection 和 Collections 有什么区别？\n\n20.List、Set、Map 之间的区别是什么？\n\n21.HashMap 和 Hashtable 有什么区别？\n\n22.如何决定使用 HashMap 还是 TreeMap？\n\n23.说一下 HashMap 的实现原理？\n\n24.说一下 HashSet 的实现原理？\n\n25.ArrayList 和 LinkedList 的区别是什么？\n\n26.如何实现数组和 List 之间的转换？\n\n27.ArrayList 和 Vector 的区别是什么？\n\n28.Array 和 ArrayList 有何区别？\n\n29.在 Queue 中 poll()和 remove()有什么区别？\n\n30.哪些集合类是线程安全的？\n\n31.迭代器 Iterator 是什么？\n\n32.Iterator 怎么使用？有什么特点？\n\n33.Iterator 和 ListIterator 有什么区别？\n\n34.怎么确保一个集合不能被修改？\n\n**三、多线程**\n\n35.并行和并发有什么区别？\n\n36.线程和进程的区别？\n\n37.守护线程是什么？\n\n38.创建线程有哪几种方式？\n\n39.说一下 runnable 和 callable 有什么区别？\n\n40.线程有哪些状态？\n\n41.sleep() 和 wait() 有什么区别？\n\n42.notify()和 notifyAll()有什么区别？\n\n43.线程的 run()和 start()有什么区别？\n\n44.创建线程池有哪几种方式？\n\n45.线程池都有哪些状态？\n\n46.线程池中 submit()和 execute()方法有什么区别？\n\n47.在 java 程序中怎么保证多线程的运行安全？\n\n48.多线程锁的升级原理是什么？\n\n49.什么是死锁？\n\n50.怎么防止死锁？\n\n51.ThreadLocal 是什么？有哪些使用场景？\n\n52.说一下 synchronized 底层实现原理？\n\n53.synchronized 和 volatile 的区别是什么？\n\n54.synchronized 和 Lock 有什么区别？\n\n55.synchronized 和 ReentrantLock 区别是什么？\n\n56.说一下 atomic 的原理？\n\n**四、反射**\n\n57.什么是反射？\n\n58.什么是 java 序列化？什么情况下需要序列化？\n\n59.动态代理是什么？有哪些应用？\n\n60.怎么实现动态代理？\n\n**五、对象拷贝**\n\n61.为什么要使用克隆？\n\n62.如何实现对象克隆？\n\n63.深拷贝和浅拷贝区别是什么？\n\n**六、Java Web**\n\n64.jsp 和 servlet 有什么区别？\n\n65.jsp 有哪些内置对象？作用分别是什么？\n\n66.说一下 jsp 的 4 种作用域？\n\n67.session 和 cookie 有什么区别？\n\n68.说一下 session 的工作原理？\n\n69.如果客户端禁止 cookie 能实现 session 还能用吗？\n\n70.spring mvc 和 struts 的区别是什么？\n\n71.如何避免 sql 注入？\n\n72.什么是 XSS 攻击，如何避免？\n\n73.什么是 CSRF 攻击，如何避免？\n\n**七、异常**\n\n74.throw 和 throws 的区别？\n\n75.final、finally、finalize 有什么区别？\n\n76.try-catch-finally 中哪个部分可以省略？\n\n77.try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？\n\n78.常见的异常类有哪些？\n\n**八、网络**\n\n79.http 响应码 301 和 302 代表的是什么？有什么区别？\n\n80.forward 和 redirect 的区别？\n\n81.简述 tcp 和 udp的区别？\n\n82.tcp 为什么要三次握手，两次不行吗？为什么？\n\n83.说一下 tcp 粘包是怎么产生的？\n\n84.OSI 的七层模型都有哪些？\n\n85.get 和 post 请求有哪些区别？\n\n86.如何实现跨域？\n\n87.说一下 JSONP 实现原理？\n\n**九、设计模式**\n\n88.说一下你熟悉的设计模式？\n\n89.简单工厂和抽象工厂有什么区别？\n\n**十、Spring/Spring MVC**\n\n90.为什么要使用 spring？\n\n91.解释一下什么是 aop？\n\n92.解释一下什么是 ioc？\n\n93.spring 有哪些主要模块？\n\n94.spring 常用的注入方式有哪些？\n\n95.spring 中的 bean 是线程安全的吗？\n\n96.spring 支持几种 bean 的作用域？\n\n97.spring 自动装配 bean 有哪些方式？\n\n98.spring 事务实现方式有哪些？\n\n99.说一下 spring 的事务隔离？\n\n100.说一下 spring mvc 运行流程？\n\n101.spring mvc 有哪些组件？\n\n102.@RequestMapping 的作用是什么？\n\n103.@Autowired 的作用是什么？\n\n**十一、Spring Boot/Spring Cloud**\n\n104.什么是 spring boot？\n\n105.为什么要用 spring boot？\n\n106.spring boot 核心配置文件是什么？\n\n107.spring boot 配置文件有哪几种类型？它们有什么区别？\n\n108.spring boot 有哪些方式可以实现热部署？\n\n109.jpa 和 hibernate 有什么区别？\n\n110.什么是 spring cloud？\n\n111.spring cloud 断路器的作用是什么？\n\n112.spring cloud 的核心组件有哪些？\n\n**十二、Hibernate**\n\n113.为什么要使用 hibernate？\n\n114.什么是 ORM 框架？\n\n115.hibernate 中如何在控制台查看打印的 sql 语句？\n\n116.hibernate 有几种查询方式？\n\n117.hibernate 实体类可以被定义为 final 吗？\n\n118.在 hibernate 中使用 Integer 和 int 做映射有什么区别？\n\n119.hibernate 是如何工作的？\n\n120.get()和 load()的区别？\n\n121.说一下 hibernate 的缓存机制？\n\n122.hibernate 对象有哪些状态？\n\n123.在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？\n\n124.hibernate 实体类必须要有无参构造函数吗？为什么？\n\n**十三、Mybatis**\n\n125.mybatis 中 #{}和 ${}的区别是什么？\n\n126.mybatis 有几种分页方式？\n\n127.RowBounds 是一次性查询全部结果吗？为什么？\n\n128.mybatis 逻辑分页和物理分页的区别是什么？\n\n129.mybatis 是否支持延迟加载？延迟加载的原理是什么？\n\n130.说一下 mybatis 的一级缓存和二级缓存？\n\n131.mybatis 和 hibernate 的区别有哪些？\n\n132.mybatis 有哪些执行器（Executor）？\n\n133.mybatis 分页插件的实现原理是什么？\n\n134.mybatis 如何编写一个自定义插件？\n\n**十四、RabbitMQ**\n\n135.rabbitmq 的使用场景有哪些？\n\n136.rabbitmq 有哪些重要的角色？\n\n137.rabbitmq 有哪些重要的组件？\n\n138.rabbitmq 中 vhost 的作用是什么？\n\n139.rabbitmq 的消息是怎么发送的？\n\n140.rabbitmq 怎么保证消息的稳定性？\n\n141.rabbitmq 怎么避免消息丢失？\n\n142.要保证消息持久化成功的条件有哪些？\n\n143.rabbitmq 持久化有什么缺点？\n\n144.rabbitmq 有几种广播类型？\n\n145.rabbitmq 怎么实现延迟消息队列？\n\n146.rabbitmq 集群有什么用？\n\n147.rabbitmq 节点的类型有哪些？\n\n148.rabbitmq 集群搭建需要注意哪些问题？\n\n149.rabbitmq 每个节点是其他节点的完整拷贝吗？为什么？\n\n150.rabbitmq 集群中唯一一个磁盘节点崩溃了会发生什么情况？\n\n151.rabbitmq 对集群节点停止顺序有要求吗？\n\n**十五、Kafka**\n\n152.kafka 可以脱离 zookeeper 单独使用吗？为什么？\n\n153.kafka 有几种数据保留的策略？\n\n154.kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G，这个时候 kafka 将如何处理？\n\n155.什么情况会导致 kafka 运行变慢？\n\n156.使用 kafka 集群需要注意什么？\n\n**十六、Zookeeper**\n\n157.zookeeper 是什么？\n\n158.zookeeper 都有哪些功能？\n\n159.zookeeper 有几种部署模式？\n\n160.zookeeper 怎么保证主从节点的状态同步？\n\n161.集群中为什么要有主节点？\n\n162.集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？\n\n163.说一下 zookeeper 的通知机制？\n\n**十七、MySql**\n\n164.数据库的三范式是什么？\n\n165.一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？\n\n166.如何获取当前数据库版本？\n\n167.说一下 ACID 是什么？\n\n168.char 和 varchar 的区别是什么？\n\n169.float 和 double 的区别是什么？\n\n170.mysql 的内连接、左连接、右连接有什么区别？\n\n171.mysql 索引是怎么实现的？\n\n172.怎么验证 mysql 的索引是否满足需求？\n\n173.说一下数据库的事务隔离？\n\n174.说一下 mysql 常用的引擎？\n\n175.说一下 mysql 的行锁和表锁？\n\n176.说一下乐观锁和悲观锁？\n\n177.mysql 问题排查都有哪些手段？\n\n178.如何做 mysql 的性能优化？\n\n**十八、Redis**\n\n179.redis 是什么？都有哪些使用场景？\n\n180.redis 有哪些功能？\n\n181.redis 和 memecache 有什么区别？\n\n182.redis 为什么是单线程的？\n\n183.什么是缓存穿透？怎么解决？\n\n184.redis 支持的数据类型有哪些？\n\n185.redis 支持的 java 客户端都有哪些？\n\n186.jedis 和 redisson 有哪些区别？\n\n187.怎么保证缓存和数据库数据的一致性？\n\n188.redis 持久化有几种方式？\n\n189.redis 怎么实现分布式锁？\n\n190.redis 分布式锁有什么缺陷？\n\n191.redis 如何做内存优化？\n\n192.redis 淘汰策略有哪些？\n\n193.redis 常见的性能问题有哪些？该如何解决？\n\n**十九、JVM**\n\n194.说一下 jvm 的主要组成部分？及其作用？\n\n195.说一下 jvm 运行时数据区？\n\n196.说一下堆栈的区别？\n\n197.队列和栈是什么？有什么区别？\n\n198.什么是双亲委派模型？\n\n199.说一下类加载的执行过程？\n\n200.怎么判断对象是否可以被回收？\n\n201.java 中都有哪些引用类型？\n\n202.说一下 jvm 有哪些垃圾回收算法？\n\n203.说一下 jvm 有哪些垃圾回收器？\n\n204.详细介绍一下 CMS 垃圾回收器？\n\n205.新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？\n\n206.简述分代垃圾回收器是怎么工作的？\n\n207.说一下 jvm 调优的工具？\n\n208.常用的 jvm 调优的参数都有哪些？\n","tags":["Java团长"]}]